#!/SBUILD ver @v1.0.0
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/packages/apptainer/archive.wrappe.musl.yaml
_disabled: false

pkg: "apptainer"
pkg_id: "wrappe.github.com.apptainer.apptainer.musl"
pkg_type: "archive"
category:
  - "ConsoleOnly"
  - "Utility"
description: "Standalone Linux Container Alternative to docker/podman that runs anywhere with 0 Dependency"
homepage:
  - "https://github.com/apptainer/apptainer"
license:
  - id: "BSD-3-Clause"
    url: "https://github.com/apptainer/apptainer/raw/6dc33b3640770d3d02177263094a632f797172c4/LICENSE.md"
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "Built From Source (Latest Git HEAD). Check/Report @ https://github.com/apptainer/apptainer"
  - "Statically Linked on Alpine (MUSL)"
  - "Packed Using Wrappe. Check/Report @ https://github.com/Systemcluster/wrappe"
  - "Learn more @ https://docs.pkgforge.dev/formats/packages/archive"
  - "[NO_DESKTOP_INTEGRATION] (Does not need desktop integration)"
  - "This may need extra requirements on host, read more: https://apptainer.org/docs/user/latest/bind_paths_and_mounts.html#requirements"
provides:
  - "apptainer"
repology:
  - "apptainer"
src_url:
  - "https://github.com/apptainer/apptainer"
tag:
  - "Utility"
x_exec:
  host:
    - "aarch64-Linux"
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    pushd "$(mktemp -d)" >/dev/null 2>&1 && \
    git clone --depth="1" --filter="blob:none" --no-checkout --single-branch --quiet "https://github.com/apptainer/apptainer" "./TEMPREPO" >/dev/null 2>&1 && \
    git --git-dir="./TEMPREPO/.git" --no-pager log -1 --pretty=format:'HEAD-%h-%cd' --date=format:'%y%m%dT%H%M%S' && \
    [ -d "$(realpath .)/TEMPREPO" ] && rm -rf "$(realpath .)" >/dev/null 2>&1 && popd >/dev/null 2>&1
  run: |
    #Build
     mkdir -pv "${SBUILD_TMPDIR}/tmp" && docker run --privileged --net="host" --name "alpine-builder" --pull="always" \
     -e "PKG=${PKG}" -e "PKG_ID=${PKG_ID}" -e "PKG_TYPE=${PKG_TYPE}" -e "PKG_VER=${PKG_VER}" \
     -e "PKGVER=${PKGVER}" -e "SBUILD_PKG=${SBUILD_PKG}" -e "SBUILD_PKGVER=${SBUILD_PKGVER}" \
     --volume "${SBUILD_TMPDIR}/tmp:/tmp:rw" \
     "docker.io/alpine:edge" \
      sh -c '
      #Setup ENV
       mkdir -p "/build-bins" && cd "$(mktemp -d)" >/dev/null 2>&1
       apk update && apk upgrade --no-interactive 2>/dev/null
       apk del ninja-is-really-ninja --force --no-interactive 2>/dev/null
       apk cache clean --purge
      #CoreUtils
       apk add 7zip binutils build-base clang coreutils croc curl findutils file g++ git grep jq libc-dev linux-headers moreutils rsync tar tree util-linux xz zstd --latest --upgrade --no-interactive 2>/dev/null
      #Sharun
       curl -w "(DL) <== %{url}\n" -qfSL "https://github.com/VHSgunzo/sharun/releases/latest/download/sharun-$(uname -m)-aio" -o "/usr/local/bin/sharun"
       chmod -v "a+x" "/usr/local/bin/sharun"
       command -v sharun &>/dev/null || exit 1
      #Get Wrappe
       curl -w "(DL) <== %{url}\n" -qfSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/wrappe" -o "/usr/local/bin/wrappe"
       chmod -v "a+x" "/usr/local/bin/wrappe"
       command -v wrappe &>/dev/null || exit 1
      #Build
       apk add bash build-base gawk grep go sed --latest --upgrade --no-interactive 2>/dev/null
       command -v go &>/dev/null || exit 1
       git clone --filter "blob:none" --depth="1" --quiet "https://github.com/apptainer/apptainer" "./TEMPREPO" && cd "./TEMPREPO"
       OWD_P="$(realpath .)"
       chmod "+x" "${OWD_P}/mconfig" && bash "${OWD_P}/mconfig" -b "${OWD_P}/STATIC_BUILD" --prefix="${OWD_P}/STATIC_INSTALL/usr" -s -v
       cd "${OWD_P}/STATIC_BUILD" && make --jobs="$(($(nproc)+1))" ; make install
       cd "${OWD_P}" &&\
       if [[ -s "${OWD_P}/STATIC_INSTALL/usr/bin/apptainer" && $(stat -c%s "${OWD_P}/STATIC_INSTALL/usr/bin/apptainer") -gt 10000 ]]; then
         PROG_DIR="${OWD_P}/STATIC_INSTALL/usr/libexec/apptainer/bin"
         mkdir -pv "${PROG_DIR}"
         curl -w "(DL) <== %{url}\n" -qfSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/fuse2fs" -o "${PROG_DIR}/fuse2fs"
         curl -w "(DL) <== %{url}\n" -qfSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/fuse-overlayfs" -o "${PROG_DIR}/fuse-overlayfs"
         curl -w "(DL) <== %{url}\n" -qfSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/gocryptfs" -o "${PROG_DIR}/gocryptfs"
         curl -w "(DL) <== %{url}\n" -qfSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/mksquashfs" -o "${PROG_DIR}/mksquashfs"
         curl -w "(DL) <== %{url}\n" -qfSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/squashfuse" -o "${PROG_DIR}/squashfuse"
         curl -w "(DL) <== %{url}\n" -qfSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/squashfuse_ll" -o "${PROG_DIR}/squashfuse_ll"
         curl -w "(DL) <== %{url}\n" -qfSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/unsquashfs" -o "${PROG_DIR}/unsquashfs"
         chmod 'a+x' -v "${PROG_DIR}/fuse2fs" "${PROG_DIR}/fuse-overlayfs"  "${PROG_DIR}/gocryptfs" \
           "${PROG_DIR}/mksquashfs" "${PROG_DIR}/squashfuse" "${PROG_DIR}/squashfuse_ll" "${PROG_DIR}/unsquashfs"
         find -L "${OWD_P}/STATIC_INSTALL" -type f -exec file -i "{}" \; | grep -Ei "application/.*executable" | cut -d":" -f1 | xargs realpath | xargs -I "{}" objcopy --remove-section=".comment" --remove-section=".note.*" "{}" \;
         find -L "${OWD_P}/STATIC_INSTALL" -type f -exec file -i "{}" \; | grep -Ei "application/.*executable" | cut -d":" -f1 | xargs realpath | xargs -I "{}" strip --strip-all --verbose "{}" \;
         ls "${OWD_P}/STATIC_INSTALL" -lsh
         du -sh "${OWD_P}/STATIC_INSTALL"
         tree "${OWD_P}/STATIC_INSTALL"
       else
         exit 1
       fi
      #Pack
       wrappe --current-dir "command" --compression "22" --show-information "none" --unpack-directory ".apptainer.wrappe" --unpack-target "cwd" "${OWD_P}/STATIC_INSTALL" "${OWD_P}/STATIC_INSTALL/usr/bin/apptainer" "/build-bins/apptainer"
       [[ -s "/build-bins/apptainer" ]] || exit 1
      #Copy
       ( askalono --format "json" crawl --follow "$(realpath .)" | jq -r ".. | objects | .path? // empty" | head -n 1 | xargs -I "{}" cp -fv "{}" "/build-bins/LICENSE" ) 2>/dev/null
      #Strip 
       find "/build-bins/" -type f -exec bash -c "echo && realpath {} && readelf --section-headers {} 2>/dev/null" \;
       file "/build-bins/"* && stat -c "%n:         %s Bytes" "/build-bins/"* && \
       du "/build-bins/"* --bytes --human-readable --time --time-style="full-iso" --summarize
       popd >/dev/null 2>&1
      '
    #Copy & Meta
     docker cp "alpine-builder:/build-bins/." "${SBUILD_TMPDIR}/"
     [ -s "${SBUILD_TMPDIR}/LICENSE" ] && cp -fv "${SBUILD_TMPDIR}/LICENSE" "${SBUILD_OUTDIR}/LICENSE"
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type f -exec file -i "{}" \; | grep -Ei "application/.*executable|inode/symlink|text/x-perl|text/.*script" | cut -d":" -f1 | xargs realpath --no-symlinks | xargs -I "{}" rsync -achvL "{}" "${SBUILD_OUTDIR}"