pipeline {
    agent { label 'jupiter-16G-1' }  // Using riscv machine (milk-v/jupiter)

    environment {
        SYSTMP = "${WORKSPACE}/tmp"  
        USER_AGENT = "Mozilla/5.0"  
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout scm  // Standard SCM checkout
            }
        }

        stage('Setup Environment') {
            steps {
                sh '''#!/bin/bash
                    set -x
                    echo "üì¶ Setting up build environment..."
                    
                    # Create workspace directories
                    mkdir -p "${WORKSPACE}/x86_64-Linux"
                    mkdir -p "${WORKSPACE}/tmp"
                    
                    # Install core dependencies
                    sudo apt-get update -y
                    sudo apt-get install -y bc coreutils curl dos2unix jq moreutils wget
                    
                    # Get user agent
                    curl -qfsSL 'https://raw.githubusercontent.com/pkgforge/devscripts/main/Misc/User-Agents/ua_firefox_macos_latest.txt' > "${WORKSPACE}/user_agent.txt"
                    export USER_AGENT="$(cat ${WORKSPACE}/user_agent.txt)"
                    echo "USER_AGENT=${USER_AGENT}" >> "${WORKSPACE}/env.properties"
                '''
            }
        }

        stage('Install Addons') {
            environment {
                LOCAL_BIN = "${WORKSPACE}/.local/bin"
            }
            steps {
                sh '''#!/bin/bash
                    set -x
                    set +e  # Continue on error
                    
                    echo "üì• Setting up local bin directory..."
                    mkdir -p "${LOCAL_BIN}"
                    
                    # Install rclone locally
                    echo "‚¨áÔ∏è Downloading rclone..."
                    if ! curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)/rclone" -o "${LOCAL_BIN}/rclone"; then
                        echo "‚ö†Ô∏è Failed to download rclone (non-fatal)"
                    else
                        chmod +x "${LOCAL_BIN}/rclone"
                        echo "‚úîÔ∏è Rclone installed to ${LOCAL_BIN}"
                        
                        echo "export PATH=\\"${LOCAL_BIN}:\\$PATH\\"" >> ~/.bashrc
                        source ~/.bashrc  # Apply to current session
                        
                        # Verify installation
                        if command -v rclone >/dev/null; then
                            echo "‚úÖ Rclone ready: $(rclone --version | head -n1)"
                        else
                            echo "‚ùå Rclone not in PATH (may need new shell)"
                        fi
                    fi
                    
                    # Temporary PATH for current build
                    export PATH="${LOCAL_BIN}:$PATH"
                '''
            }
        }

        stage('Build Packages') {
            environment {
                EXCLUDE_CACHED = "YES"
                FORCE_REBUILD_ALL = "NO"
                LOCAL_BIN = "${WORKSPACE}/.local/bin"
            }
            steps {
                sh '''#!/bin/bash
                    echo "export PATH=\\"${LOCAL_BIN}:\\$PATH\\"" >> ~/.bashrc
                    source ~/.bashrc  # Apply to current session

                    set -x
                    echo "üèóÔ∏è Starting package builds..."
                    
                    # Download builder script
                    curl -qfsSL "https://raw.githubusercontent.com/pkgforge/bincache/main/scripts/runner/builder.sh" -o "${SYSTMP}/BUILDER.sh"
                    chmod +x "${SYSTMP}/BUILDER.sh"
                    
                    # Execute with logging
                    "${SYSTMP}/BUILDER.sh" | tee "${SYSTMP}/BUILD.log"
                    
                    # Process logs
                    if grep -qi "completed" "${SYSTMP}/BUILD.log"; then
                        echo "‚úÖ Build completed successfully"
                    else
                        echo "‚ùå Build encountered errors"
                        exit 1  // Fail the stage if build fails
                    fi
                '''
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '**/BUILD.log', allowEmptyArchive: true
            sh '''#!/bin/bash
                echo "üßπ Cleaning up temporary files..."
                rm -rf "${SYSTMP}"  // Cleanup unless KEEP_LOGS is set
            '''
        }
        success {
            echo "üéâ Pipeline completed successfully"
        }
        failure {
            echo "‚ùå Pipeline failed - check build logs"
        }
    }
}