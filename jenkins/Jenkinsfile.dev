pipeline {
    agent { label 'jupiter-16G-1' }  // Using riscv machine (milk-v/jupiter)

    environment {
        SYSTMP = "${WORKSPACE}/tmp"  
        USER_AGENT = "Mozilla/5.0"  

        EXCLUDE_CACHED = "YES"
        FORCE_REBUILD_ALL = "NO"
        KEEP_LOGS = "NO"
        NOTIFY_DISCORD = "NO"
    }

    stages {
        stage('Clone Repository') {
            steps {
                checkout scm
                sh '''#!/bin/bash
                    mkdir -p "${WORKSPACE}/main/x86_64-Linux"
                    mkdir -p "${SYSTMP}"
                '''
            }
        }

        stage('Setup Environment') {
            steps {
                sh '''#!/bin/bash
                    set -x
                    echo "üì¶ Setting up build environment..."
                    
                    # Install core dependencies (without sudo)
                    apt-get update -y && apt-get install -y \
                        bc coreutils curl dos2unix fdupes jq moreutils wget \
                        apt-transport-https apt-utils ca-certificates gnupg2 \
                        p7zip-full rename rsync software-properties-common texinfo tmux util-linux
                    
                    export SYSTMP="${WORKSPACE}/tmp"
                    mkdir -p "${SYSTMP}"
                    echo "SYSTMP=${SYSTMP}" > "${WORKSPACE}/env.properties"
                    
                    # Set user agent
                    USER_AGENT="$(curl -qfsSL 'https://raw.githubusercontent.com/pkgforge/devscripts/main/Misc/User-Agents/ua_firefox_macos_latest.txt')"
                    echo "USER_AGENT=${USER_AGENT}" >> "${WORKSPACE}/env.properties"
                    
                    # Timezone setup
                    # TODO 
    
                '''
            }
        }

        stage('Install Addons') {
            environment {
                SYSTMP = "${WORKSPACE}/tmp"  
                LOCAL_BIN = "${WORKSPACE}/.local/bin"
            }
            steps {
                sh '''#!/bin/bash
                    set -x
                    set +e
                    
                    echo "üì• Installing tools to ${LOCAL_BIN}..."
                    mkdir -p "${LOCAL_BIN}"
                    
                    # Install rclone locally
                    curl -qfsSL "${BIN_CACHE_URL}/$(uname -m)/rclone" -o "${LOCAL_BIN}/rclone"
                    chmod +x "${LOCAL_BIN}/rclone"
                    
                    # Install notify tool
                    curl -qfsSL "${BIN_CACHE_URL}/$(uname -m)/notify" -o "${LOCAL_BIN}/notify"
                    chmod +x "${LOCAL_BIN}/notify"
                    
                    # Setup Minisign
                    mkdir -p "${WORKSPACE}/.minisign"
                    echo "$MINISIGN_KEY" > "${WORKSPACE}/.minisign/pkgforge.key"
                    
                    # Update PATH
                    echo "export PATH=\"${LOCAL_BIN}:\\$PATH\"" >> ~/.bashrc
                    source ~/.bashrc
                '''
            }
        }

        stage('Sanity Checks') {
            environment {
                SYSTMP = "${WORKSPACE}/tmp"  
                LOCAL_BIN = "${WORKSPACE}/.local/bin"
            }
            steps {
                sh '''#!/bin/bash
                    echo "export PATH=\"${LOCAL_BIN}:\\$PATH\"" >> ~/.bashrc
                    source ~/.bashrc
                    set +e
                    echo "üîç Running pre-build checks..."
                    
                    # Package count verification
                    PKG_COUNT=$(curl -qfsSL "https://raw.githubusercontent.com/pkgforge/bincache/main/SBUILD_LIST.json" | jq -r '.[] | .pkg_family' | wc -l | tr -d '[:space:]')
                    if [[ "${PKG_COUNT}" -le 10 ]]; then
                        echo "‚ùå FATAL: Too few Packages to Build (${PKG_COUNT})"
                        exit 1
                    fi
                    
                    # Dependency verification
                    command -v rclone >/dev/null || {
                        echo "‚ùå rclone not found in PATH"
                        exit 1
                    }
                '''
            }
        }

        stage('Build Packages') {
            environment {
                SYSTMP = "${WORKSPACE}/tmp"  
                EXCLUDE_CACHED = "YES"
                FORCE_REBUILD_ALL = "NO"
                LOCAL_BIN = "${WORKSPACE}/.local/bin"
            }
            steps {
                sh '''#!/bin/bash
                    set -x
                    echo "üèóÔ∏è Starting package builds..."
                    
                    # Download and patch builder script
                    curl -qfsSL "https://raw.githubusercontent.com/pkgforge/bincache/main/scripts/runner/builder.sh" -o "${SYSTMP}/BUILDER.sh"
                    
                    # Patch the script to work without sudo
                    sed -i 's/sudo //g' "${SYSTMP}/BUILDER.sh"
                    sed -i '/require_sudo()/ {N;N;N;d;}' "${SYSTMP}/BUILDER.sh"  # Remove sudo check
                    
                    dos2unix "${SYSTMP}/BUILDER.sh"
                    chmod +x "${SYSTMP}/BUILDER.sh"
                    
                    # Set alternative install prefix
                    export PREFIX="${WORKSPACE}/.local"
                    export PATH="${PREFIX}/bin:$PATH"
                    
                    # Execute with full logging
                    "${SYSTMP}/BUILDER.sh" | tee "${SYSTMP}/BUILD.log"
                    
                    # Process logs
                    if grep -qi "completed" "${SYSTMP}/BUILD.log"; then
                        echo "‚úÖ Build completed successfully"
                    else
                        echo "‚ùå Build encountered errors"
                        grep -i "error\\|fail" "${SYSTMP}/BUILD.log" || true
                        exit 1
                    fi
                    
                '''
            }
        }

        stage('Post-Build Cleanup') {
            steps {
                sh '''#!/bin/bash
                    echo "üßπ Cleaning up temporary files..."
                    if [[ "${KEEP_LOGS}" != "YES" ]]; then
                        rm -rf "${SYSTMP}"
                    fi
                '''
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '**/BUILD.log', allowEmptyArchive: true
            sh '''#!/bin/bash
                echo "üßπ Cleaning up temporary files..."
                rm -rf "${SYSTMP}"  // Cleanup unless KEEP_LOGS is set
            '''
        }
        success {
            echo "üéâ Pipeline completed successfully"
        }
        failure {
            echo "‚ùå Pipeline failed - check build logs"
        }
    }
}