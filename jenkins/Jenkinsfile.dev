pipeline {
    agent none
    
    environment {
        // Hardcoded Configuration
        BUILD_TIMEOUT = "200"
        HOST = "riscv64-Linux"
        SBUILD_URL = "https://github.com/akifejaz/soarpkgs/blob/main/binaries/desync/static.official.source.yaml"
        PKG_FAMILY = "desync"
        CI_INFRA = "self-hosted"
        KEEP_LOGS = true
        REBUILD = true
        
        // System Configuration
        SYSTMP = "${env.WORKSPACE}/tmp"
        GHA_MODE = "JENKINS"
        USER_AGENT = "Jenkins-CI-Package-Builder/1.0"
        
        // Credentials
        RO_GHTOKEN = credentials('ro-ghtoken')
        RO_GLTOKEN = credentials('ro-gltoken')
        MINISIGN_KEY = credentials('minisign-key')
    }

    stages {
        stage('Pre-Setup & Validation') {
            agent { label 'master' }
            steps {
                script {
                    // Validate timeout value
                    if (!env.BUILD_TIMEOUT.isInteger()) {
                        error("BUILD_TIMEOUT must be an integer value")
                    }
                    
                    // Create temporary directory
                    sh '''
                    mkdir -p ${SYSTMP}
                    mkdir -p ${SYSTMP}/_POD_BRIDGE
                    '''
                    
                    // Validate SBUILD_URL
                    if (env.SBUILD_URL.isEmpty()) {
                        error("SBUILD_URL must be configured")
                    }
                    
                    // Validate PKG_FAMILY
                    if (env.PKG_FAMILY.isEmpty()) {
                        error("PKG_FAMILY must be configured")
                    }
                    
                    // Normalize package family name
                    PKG_FAMILY_LOCAL = env.PKG_FAMILY.toLowerCase().replaceAll("\\s", "")
                    
                    // Generate runner matrix
                    RUNNER_MATRIX = generateRunnerMatrix(env.HOST, env.CI_INFRA)
                }
            }
        }

        stage('Build Packages') {
            matrix {
                axes {
                    axis {
                        name 'PACKAGE'
                        values readJSON(text: env.RUNNER_MATRIX).collect { it.host }
                    }
                }
                agent { 
                    label determineAgentLabel(PACKAGE) 
                }
                stages {
                    stage('Setup Build Environment') {
                        steps {
                            script {
                                // Find the matrix entry for this host
                                def matrixEntry = readJSON(text: env.RUNNER_MATRIX).find { it.host == PACKAGE }
                                env.HOST_TRIPLET = matrixEntry.host
                                env.RUNNER = matrixEntry.runner
                                
                                // Determine if cross-compiling
                                def hostArch = sh(script: 'uname -m', returnStdout: true).trim()
                                if (HOST_TRIPLET != "${hostArch}-Linux") {
                                    env.CROSS_COMPILING = "YES"
                                    env.ON_QEMU = "YES"
                                } else {
                                    env.CROSS_COMPILING = "NO"
                                    env.ON_QEMU = "NO"
                                }
                                
                                // Setup platform-specific variables
                                if (HOST_TRIPLET.contains("aarch64")) {
                                    env.DOCKER_PLATFORM = "linux/arm64"
                                } else if (HOST_TRIPLET.contains("loongarch64")) {
                                    env.DOCKER_PLATFORM = "linux/loong64"
                                } else if (HOST_TRIPLET.contains("riscv64")) {
                                    env.DOCKER_PLATFORM = "linux/riscv64"
                                } else if (HOST_TRIPLET.contains("x86_64")) {
                                    env.DOCKER_PLATFORM = "linux/amd64"
                                }
                                
                                // Install required dependencies
                                sh '''
                                sudo apt-get update -y
                                sudo apt-get install -y \
                                    bc coreutils curl dos2unix fdupes jq moreutils wget \
                                    apt-transport-https apt-utils ca-certificates gnupg2 \
                                    p7zip-full rename rsync software-properties-common \
                                    texinfo tmux util-linux
                                
                                # Install yq for SBUILD parsing
                                sudo curl -qfsSL "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_${HOST_TRIPLET.startsWith('aarch64') ? 'arm64' : 'amd64'}" \
                                    -o /usr/local/bin/yq && \
                                    sudo chmod +x /usr/local/bin/yq
                                '''
                                
                                // Setup Minisign
                                sh '''
                                mkdir -p ${HOME}/.minisign
                                echo "${MINISIGN_KEY}" > ${HOME}/.minisign/pkgforge.key
                                chmod 600 ${HOME}/.minisign/pkgforge.key
                                '''
                            }
                        }
                    }

                    // ... rest of the stages remain the same ...
                }
            }
        }
    }

    // ... post section remains the same ...
}

// Helper function to generate runner matrix
def generateRunnerMatrix(host, ciInfra) {
    def matrix = []
    
    if (host == "ALL") {
        matrix = [
            [host: "aarch64-Linux", runner: "ubuntu-24.04-arm"],
            [host: "x86_64-Linux", runner: "ubuntu-latest"]
        ]
    } else {
        matrix = [[host: host, runner: ciInfra == "circle-ci" ? "${host.split('-')[0]}-linux-circle" : "ubuntu-latest"]]
    }
    
    return writeJSON returnText: true, json: matrix
}

// Helper function to determine agent label
def determineAgentLabel(host) {
    if (host.contains('aarch64')) {
        return 'arm64-node'
    } else if (host.contains('riscv64')) {
        return 'riscv64-node'
    } else {
        return 'amd64-node'
    }
}