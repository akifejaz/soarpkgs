#!/SBUILD ver @v1.0.0
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/binaries/s6-networking/static.nixpkgs.stable.yaml
_disabled: false

pkg: "s6-networking"
pkg_id: "nixpkgs.s6-networking"
pkg_type: "static"
category:
  - "ConsoleOnly"
  - "Utility"
description: 
  _default: "A suite of small networking utilities for Unix systems"
  s6-clockadd: "Adjusts the system clock depending on the input provided by a time client [s6-networking]"
  s6-clockview: "Prints the time discrepancy between the local system clock and the time provided by a time server [s6-networking]"
  s6-getservbyname: "CLI to the getservbyname() function, converting a service name and protocol into a port number [s6-networking]"
  s6-ident-client: "Client application that performs IDENT (RFC 1413) queries [s6-networking]"
  s6-sntpclock: "A small SNTP client [s6-networking]"
  s6-taiclock: "A client for the TAICLOCK protocol [s6-networking]"
  s6-taiclockd: "A server for the TAICLOCK protocol [s6-networking]"
  s6-tcpclient: "UCSPI client tool for INET domain sockets [s6-networking]"
  s6-tcpserver: "UCSPI tool for TCP connections, i.e. a super-server [s6-networking]"
  s6-tcpserver-access: "TCP access control tool [s6-networking]"
  s6-tcpserver-socketbinder: "Binds an INET domain socket to an IPv4/IPv6 address and port, then executes a program [s6-networking]"
  s6-tcpserverd: "The serving part of the s6-tcpserver [s6-networking]"
  s6-tlsc: "Establishes a TLS/SSL client connection over an existing TCP connection, then execs into an application [s6-networking]"
  s6-tlsc-io: "Client-side program in s6-networking that performs cryptography for s6-tlsc [s6-networking]"
  s6-tlsclient: "UCSPI client tool for TLS/SSL connections over INET domain sockets [s6-networking]"
  s6-tlsd: "Performs the server side of TLS/SSL connection over an existing TCP connection, then execs into an application [s6-networking]"
  s6-tlsd-io: "Client-side program in s6-networking that performs cryptography for s6-tlsd [s6-networking]"
  s6-tlsserver: "UCSPI server tool for TLS/SSL connections over INET domain sockets [s6-networking]"
  s6-ucspitlsc: "Establishes communication channels according to the UCSPI-TLS protocol, then execs into an application [s6-networking]"
  s6-ucspitlsd: "Server Side program for s6-ucspitlsc [s6-networking]"
distro_pkg:
  alpine:
    - "s6-networking"
  nixpkgs:
    - "s6-networking"
homepage:
  - "https://skarnet.org/software/s6-networking/"
license:
  - "ISC"  
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "Built Using Nix. Check/Report @ https://github.com/NixOS/nixpkgs"
provides:
  - "s6-clockadd"
  - "s6-clockview"
  - "s6-getservbyname"
  - "s6-ident-client"
  - "s6-sntpclock"
  - "s6-taiclock"
  - "s6-taiclockd"
  - "s6-tcpclient"
  - "s6-tcpserver"
  - "s6-tcpserver-access"
  - "s6-tcpserver-socketbinder"
  - "s6-tcpserverd"
  - "s6-tlsc"
  - "s6-tlsc-io"
  - "s6-tlsclient"
  - "s6-tlsd"
  - "s6-tlsd-io"
  - "s6-tlsserver"
  - "s6-ucspitlsc"
  - "s6-ucspitlsd"
repology:
  - "s6-networking"
src_url:
  - "https://github.com/skarnet/s6-networking"
tag:
  - "net"
  - "net-utils"
x_exec:
  bsys: "host://nix"
  host:
    - "aarch64-Linux"
    - "riscv64-Linux"
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    nix derivation show "nixpkgs#s6-networking" --impure --refresh --quiet 1>&1 2>/dev/null | sed -n '/^[[:space:]]*{/,$p' | jq -r '.. | objects | (select(has("version")).version, (select(has("env")) | select(.env.__json != null) | .env.__json | fromjson | select(has("version")).version) | select(.))' | tr -d '"'\''[:space:]'
  run: |
    #Build
     echo -e "\n" ; nix-instantiate --eval --expr "builtins.toJSON (with import <nixpkgs> {}; ${PKG}.meta)" --quiet 2>/dev/null | jq -r fromjson 2>/dev/null ; echo -e "\n"
     nix-build '<nixpkgs>' --impure --attr "pkgsStatic.s6-networking" --cores "$(($(nproc)+1))" --max-jobs "$(($(nproc)+1))" --log-format bar-with-logs --out-link "${SBUILD_TMPDIR}/nixbuild"
     find -L "$(find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' | head -n 1)" | sort | awk -F/ '{indent=""; for (i=2; i<NF; i++) indent=indent " "; print (NF>1 ? indent "--> " $NF : $NF)}'
    #Fix Perms
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' |\
     xargs -I{} find -L "{}" -type d -iregex ".*\(bin\|exec\).*" | \
     xargs -I{} sudo rsync -achLv --no-relative "{}/." "${SBUILD_TMPDIR}/."
     sudo chown -R "$(whoami):$(whoami)" "${SBUILD_TMPDIR}" && chmod -R 755 "${SBUILD_TMPDIR}"
    #Fix Shell Scripts
     find "${SBUILD_TMPDIR}" -type f -iregex '.*\.\(bin\|pl\)$' -exec bash -c 'mv -fv "$1" "${1%.*}"' _ "{}" \;
     find "${SBUILD_TMPDIR}" -type f \( -name "*.sh" -o -exec sh -c 'file -i "$1" | grep -qiv "application/.*executable"' sh {} \; \) -print0 | xargs -0 -I {} sh -c '
           sed "s|^#!/nix/store/.*/bin/sh|#!/bin/sh|" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ ]*/bin/\([^ ]*\)|/usr/local/bin/\1|g" -i "{}" 2>/dev/null
           sed "s|/nix/store/[^/]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^/ ]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ \"'\'']*|/|g" -i "{}" 2>/dev/null
       '
    #Copy
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type f -exec file -i "{}" \; | grep -Ei 'application/.*executable|text/x-perl|text/.*script' | cut -d":" -f1 | xargs realpath | sort -u | xargs -I "{}" rsync -achvL "{}" "${SBUILD_OUTDIR}"
     ( askalono --format "json" crawl --follow "${SBUILD_TMPDIR}" | jq -r ".. | objects | .path? // empty" | head -n 1 | xargs -I "{}" cp -fv "{}" "${SBUILD_OUTDIR}/LICENSE" ) 2>/dev/null