#!/SBUILD ver @v1.0.0
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/binaries/s6-dns/static.nixpkgs.stable.yaml
_disabled: false

pkg: "s6-dns"
pkg_id: "nixpkgs.s6-dns"
pkg_type: "static"
category:
  - "ConsoleOnly"
  - "Utility"
description: 
  _default: "A suite of DNS client programs and libraries for Unix systems"
  s6-dns-hosts-compile: "Converts /etc/hosts into a CDB file for efficient use by s6-dns programs [s6-dns]"
  s6-dnsip: "Finds both the IPv6 and IPv4 addresses associated to a domain name [s6-dns]"
  s6-dnsip4: "Finds the IPv4 addresses associated to a domain name [s6-dns]"
  s6-dnsip4-filter: "Reads domain names from stdin and outputs their IPv4 addresses [s6-dns]"
  s6-dnsip6: "Finds the IPv6 addresses associated to a domain name [s6-dns]"
  s6-dnsip6-filter: "Reads domain names from stdin and outputs their IPv6 addresses [s6-dns]"
  s6-dnsmx: "Finds the MX information associated to a domain name [s6-dns]"
  s6-dnsname: "Finds the name associated to an IPv4 or IPv6 address [s6-dns]"
  s6-dnsname-filter: "Reads IPs from stdin and outputs their domain names [s6-dns]"
  s6-dnsns: "Finds the relevant nameservers providing data for a domain [s6-dns]"
  s6-dnsq: "Performs non-recursive DNS queries and prints the answer packet and optional debug info [s6-dns]"
  s6-dnsqr: "Resolves DNS queries, printing the answer packet and optional debug information [s6-dns]"
  s6-dnsqualify: "Qualifies a domain using the domain and search rules in /etc/resolv.conf, outputting one FQDN per line [s6-dns]"
  s6-dnssoa: "Finds the SOA information associated to a domain [s6-dns]"
  s6-dnssrv: "Finds the SRV information associated to a service name, protocol name and domain name [s6-dns]"
  s6-dnstxt: "Finds the TXT information associated to a domain name [s6-dns]"
  s6-randomip: "Generates random IP addresses and prints them to its standard output, one per line [s6-dns]"
  skadnsd: "A daemon that asynchronously resolves queries from stdin & sends answers to the client [s6-dns]"
distro_pkg:
  alpine:
    - "s6-dns"
  nixpkgs:
    - "s6-dns"
homepage:
  - "https://skarnet.org/software/s6-dns/"
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "Built Using Nix. Check/Report @ https://github.com/NixOS/nixpkgs"
provides:
  - "s6-dns-hosts-compile"
  - "s6-dnsip"
  - "s6-dnsip4"
  - "s6-dnsip4-filter"
  - "s6-dnsip6"
  - "s6-dnsip6-filter"
  - "s6-dnsmx"
  - "s6-dnsname"
  - "s6-dnsname-filter"
  - "s6-dnsns"
  - "s6-dnsq"
  - "s6-dnsqr"
  - "s6-dnsqualify"
  - "s6-dnssoa"
  - "s6-dnssrv"
  - "s6-dnstxt"
  - "s6-randomip"
  - "skadnsd"  
repology:
  - "s6-dns"
src_url:
  - "https://github.com/skarnet/s6-dns"
tag:
  - "net"
  - "net-dns"
x_exec:
  host:
    - "aarch64-Linux"
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    nix derivation show "nixpkgs#s6-dns" --impure --refresh --quiet 1>&1 2>/dev/null | sed -n '/^[[:space:]]*{/,$p' | jq -r '.. | objects | (select(has("version")).version, (select(has("env")) | select(.env.__json != null) | .env.__json | fromjson | select(has("version")).version) | select(.))' | tr -d '"'\''[:space:]'
  run: |
    #Build
     echo -e "\n" ; nix-instantiate --eval --expr "builtins.toJSON (with import <nixpkgs> {}; ${PKG}.meta)" --quiet 2>/dev/null | jq -r fromjson 2>/dev/null ; echo -e "\n"
     nix-build '<nixpkgs>' --impure --attr "pkgsStatic.s6-dns" --cores "$(($(nproc)+1))" --max-jobs "$(($(nproc)+1))" --log-format bar-with-logs --out-link "${SBUILD_TMPDIR}/nixbuild"
     find -L "$(find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' | head -n 1)" | sort | awk -F/ '{indent=""; for (i=2; i<NF; i++) indent=indent " "; print (NF>1 ? indent "--> " $NF : $NF)}'
    #Fix Perms
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' |\
     xargs -I{} find -L "{}" -type d -iregex ".*\(bin\|exec\).*" | \
     xargs -I{} sudo rsync -achLv --no-relative "{}/." "${SBUILD_TMPDIR}/."
     sudo chown -R "$(whoami):$(whoami)" "${SBUILD_TMPDIR}" && chmod -R 755 "${SBUILD_TMPDIR}"
    #Fix Shell Scripts
     find "${SBUILD_TMPDIR}" -type f -iregex '.*\.\(bin\|pl\)$' -exec bash -c 'mv -fv "$1" "${1%.*}"' _ "{}" \;
     find "${SBUILD_TMPDIR}" -type f \( -name "*.sh" -o -exec sh -c 'file -i "$1" | grep -qiv "application/.*executable"' sh {} \; \) -print0 | xargs -0 -I {} sh -c '
           sed "s|^#!/nix/store/.*/bin/sh|#!/bin/sh|" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ ]*/bin/\([^ ]*\)|/usr/local/bin/\1|g" -i "{}" 2>/dev/null
           sed "s|/nix/store/[^/]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^/ ]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ \"'\'']*|/|g" -i "{}" 2>/dev/null
       '
    #Copy
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type f -exec file -i "{}" \; | grep -Ei 'application/.*executable|text/x-perl|text/.*script' | cut -d":" -f1 | xargs realpath | sort -u | xargs -I "{}" rsync -achvL "{}" "${SBUILD_OUTDIR}"
     ( askalono --format "json" crawl --follow "${SBUILD_TMPDIR}" | jq -r ".. | objects | .path? // empty" | head -n 1 | xargs -I "{}" cp -fv "{}" "${SBUILD_OUTDIR}/LICENSE" ) 2>/dev/null 