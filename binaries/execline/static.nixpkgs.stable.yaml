#!/SBUILD ver @v1.0.0
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/binaries/execline/static.nixpkgs.stable.yaml
_disabled: false

pkg: "execline"
pkg_id: "nixpkgs.execline"
pkg_type: "static"
category:
  - "ConsoleOnly"
  - "Utility"
description: 
  _default: "Non-interactive scripting Tools"
  background: "Launch a command in the background [execline]"
  backtick: "Run a program and stores its output in an environment variable [execline]"
  case: "Compare a value against a series of regular expressions & execute a program [execline]"
  cd: "Change the current working directory to a given directory & execute a program [execline]"
  define: "Replace a literal with a value & execute a program [execline]"
  dollarat: "Print the positional parameters of an execline script [execline]"
  elgetopt: "Perform getopt-style parsing on the arguments to an execline script [execline]"
  elgetpositionals: "Substitute the positional parameters of an execline script [execline]"
  elglob: "Perform globbing on a pattern & execute a program [execline]"
  eltest: "Evaluate an expression and indicates the result via its exit status [execline]"
  emptyenv: "Empty/Cleanup the current environment & execute a program [execline]"
  envfile: "Read a file containing variable assignments, add the variables to the environment & execute a program [execline]"
  exec: "Execute the command line as given [execline]"
  execlineb: "Read and Execute a script from a file as command line [execline]"
  execline-cd: "Change the current working directory to a given directory & execute a program [execline]"
  execline-umask: "Set the umask (file creation mask) & execute a program [execline]"
  exit: "Exit with a given exit code [execline]"
  export: "Set an environment variable to a given value & execute a program [execline]"
  export-array: "Encode a set of values into an environment variable & execute a program [execline]"
  fdblock: "Set/Unset the O_NONBLOCK flag on a given file descriptor & execute a program [execline]"
  fdclose: "Close a given file descriptor & execute a program [execline]"
  fdmove: "Move/Copy a given file descriptor & execute a program [execline]"
  fdreserve: "Update the environment with file descriptors that are guaranteed safe to use & execute a program [execline]"
  fdswap: "Swap two file descriptors & execute a program [execline]"
  forbacktickx: "Run a program and uses its output as loop elements to run another program [execline]"
  foreground: "Execute a sequence of commands [execline]"
  forstdin: "Use its input as loop elements to run another program [execline]"
  forx: "Run a loop [execline]"
  getcwd: "Store its current working directory into a given environment variable & execute a program [execline]"
  getpid: "Store its process ID in a given environment variable & execute a program [execline]"
  heredoc: "Run a command with a certain string fed to a file descriptor [execline]"
  homeof: "Print the home directory of a user [execline]"
  if: "Perform conditional execution [execline]"
  ifelse: "Perform conditional execution, with two branches [execline]"
  ifte: "Perform a conditional alternative [execline]"
  ifthenelse: "Perform a conditional alternative [execline]"
  importas: "Replace a literal with the value of an environment variable & execute a program [execline]"
  loopwhilex: "Perform a conditional loop [execline]"
  multidefine: "Split a value and define several variables at once & execute a program [execline]"
  multisubstitute: "Perform several substitutions at once in its argv & execute a program [execline]"
  pipeline: "Run two commands with a pipe between them [execline]"
  piperw: "Create a pipe (an anonymous one) & execute a program [execline]"
  posix-cd: "Change the current working directory to a given directory & execute a program [execline]"
  posix-umask: "Change its file mode creation mask & execute a program [execline]"
  redirfd: "Redirect a given file descriptor to a file & execute a program [execline]"
  runblock: "Write execline commands in the execline language [execline]"
  shift: "Shift the positional parameters of an execline script [execline]"
  trap: "Trap signals and run a variety of commands according to the signals it catches [execline]"
  tryexec: "Execute into a command line, with a fallback [execline]"
  umask: "Unsets the umask (file creation mask) & execute a program [execline]"
  unexport: "Remove a variable from the environment & execute a program [execline]"
  wait: "Wait for a set of children & execute a program [execline]"
  withstdinas: "Read the entirety of standard input in an environment variable & execute a program [execline]"
distro_pkg:
  alpine:
    - "execline"
  archlinux:
    aur:
      - "execline"
      - "execline-git"
  debian:
    - "execline"
  gnuguix:
    - "execline"
  nixpkgs:
    - "execline"
homepage:
  - "https://skarnet.org/software/execline"
  - "https://github.com/skarnet/execline"
license:
  - id: "ISC"
    url: "https://github.com/skarnet/execline/raw/15583497da174dd17b7b44701dcb000f46c235ed/INSTALL"  
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "Built Using Nix. Check/Report @ https://github.com/NixOS/nixpkgs"
provides:
  - "background"
  - "backtick"
  - "case"
  - "cd"
  - "define"
  - "dollarat"
  - "elgetopt"
  - "elgetpositionals"
  - "elglob"
  - "eltest"
  - "emptyenv"
  - "envfile"
  - "exec"
  - "execlineb"
  - "execline-cd"
  - "execline-umask"
  - "exit"
  - "export"
  - "fdblock"
  - "fdclose"
  - "fdmove"
  - "fdreserve"
  - "fdswap"
  - "forbacktickx"
  - "foreground"
  - "forstdin"
  - "forx"
  - "getcwd"
  - "getpid"
  - "heredoc"
  - "homeof"
  - "if"
  - "ifelse"
  - "ifte"
  - "ifthenelse"
  - "importas"
  - "loopwhilex"
  - "multidefine"
  - "multisubstitute"
  - "pipeline"
  - "piperw"
  - "posix-cd"
  - "posix-umask"
  - "redirfd"
  - "runblock"
  - "shift"
  - "trap"
  - "tryexec"
  - "umask"
  - "unexport"
  - "wait"
  - "withstdinas"
repology:
  - "execline"
src_url:
  - "https://github.com/skarnet/execline"
tag:
  - "Utility"
x_exec:
  host:
    - "aarch64-Linux"
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    nix derivation show "nixpkgs#execline" --impure --refresh --quiet 1>&1 2>/dev/null | sed -n '/^[[:space:]]*{/,$p' | jq -r '.. | objects | (select(has("version")).version, (select(has("env")) | select(.env.__json != null) | .env.__json | fromjson | select(has("version")).version) | select(.))' | tr -d '"'\''[:space:]'
  run: |
    #Build
     echo -e "\n" ; nix-instantiate --eval --expr "builtins.toJSON (with import <nixpkgs> {}; ${PKG}.meta)" --quiet 2>/dev/null | jq -r fromjson 2>/dev/null ; echo -e "\n"
     nix-build '<nixpkgs>' --impure --attr "pkgsStatic.execline" --cores "$(($(nproc)+1))" --max-jobs "$(($(nproc)+1))" --log-format bar-with-logs --out-link "${SBUILD_TMPDIR}/nixbuild"
     find -L "$(find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' | head -n 1)" | sort | awk -F/ '{indent=""; for (i=2; i<NF; i++) indent=indent " "; print (NF>1 ? indent "--> " $NF : $NF)}'
    #Fix Perms
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' |\
     xargs -I{} find -L "{}" -type d -iregex ".*\(bin\|exec\).*" | \
     xargs -I{} sudo rsync -achLv --no-relative "{}/." "${SBUILD_TMPDIR}/."
     sudo chown -Rv "$(whoami):$(whoami)" "${SBUILD_TMPDIR}" && chmod -Rv 755 "${SBUILD_TMPDIR}"
    #Fix Shell Scripts
     find "${SBUILD_TMPDIR}" -type f -iregex '.*\.\(bin\|pl\)$' -exec bash -c 'mv -fv "$1" "${1%.*}"' _ "{}" \;
     find "${SBUILD_TMPDIR}" -type f \( -name "*.sh" -o -exec sh -c 'file -i "$1" | grep -qiv "application/.*executable"' sh {} \; \) -print0 | xargs -0 -I {} sh -c '
           sed "s|^#!/nix/store/.*/bin/sh|#!/bin/sh|" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ ]*/bin/\([^ ]*\)|/usr/local/bin/\1|g" -i "{}" 2>/dev/null
           sed "s|/nix/store/[^/]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^/ ]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ \"'\'']*|/|g" -i "{}" 2>/dev/null
       '
    #Copy
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type f -exec file -i "{}" \; | grep -Ei 'application/.*executable|text/x-perl|text/.*script' | cut -d":" -f1 | xargs realpath | sort -u | xargs -I "{}" rsync -achvL "{}" "${SBUILD_OUTDIR}"
     ( askalono --format "json" crawl --follow "${SBUILD_TMPDIR}" | jq -r ".. | objects | .path? // empty" | head -n 1 | xargs -I "{}" cp -fv "{}" "${SBUILD_OUTDIR}/LICENSE" ) 2>/dev/null 