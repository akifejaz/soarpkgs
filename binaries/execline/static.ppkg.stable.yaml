#!/SBUILD ver @v1.0.0
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/binaries/execline/static.ppkg.stable.yaml
_disabled: false

pkg: "execline"
pkg_id: "ppkg.execline.stable"
pkg_type: "static"
category:
  - "ConsoleOnly"
  - "Utility"
description: 
  _default: "Non-interactive scripting Tools"
  background: "Launch a command in the background [execline]"
  backtick: "Run a program and stores its output in an environment variable [execline]"
  case: "Compare a value against a series of regular expressions & execute a program [execline]"
  cd: "Change the current working directory to a given directory & execute a program [execline]"
  define: "Replace a literal with a value & execute a program [execline]"
  dollarat: "Print the positional parameters of an execline script [execline]"
  elgetopt: "Perform getopt-style parsing on the arguments to an execline script [execline]"
  elgetpositionals: "Substitute the positional parameters of an execline script [execline]"
  elglob: "Perform globbing on a pattern & execute a program [execline]"
  eltest: "Evaluate an expression and indicates the result via its exit status [execline]"
  emptyenv: "Empty/Cleanup the current environment & execute a program [execline]"
  envfile: "Read a file containing variable assignments, add the variables to the environment & execute a program [execline]"
  exec: "Execute the command line as given [execline]"
  execlineb: "Read and Execute a script from a file as command line [execline]"
  execline-cd: "Change the current working directory to a given directory & execute a program [execline]"
  execline-umask: "Set the umask (file creation mask) & execute a program [execline]"
  exit: "Exit with a given exit code [execline]"
  export: "Set an environment variable to a given value & execute a program [execline]"
  export-array: "Encode a set of values into an environment variable & execute a program [execline]"
  fdblock: "Set/Unset the O_NONBLOCK flag on a given file descriptor & execute a program [execline]"
  fdclose: "Close a given file descriptor & execute a program [execline]"
  fdmove: "Move/Copy a given file descriptor & execute a program [execline]"
  fdreserve: "Update the environment with file descriptors that are guaranteed safe to use & execute a program [execline]"
  fdswap: "Swap two file descriptors & execute a program [execline]"
  forbacktickx: "Run a program and uses its output as loop elements to run another program [execline]"
  foreground: "Execute a sequence of commands [execline]"
  forstdin: "Use its input as loop elements to run another program [execline]"
  forx: "Run a loop [execline]"
  getcwd: "Store its current working directory into a given environment variable & execute a program [execline]"
  getpid: "Store its process ID in a given environment variable & execute a program [execline]"
  heredoc: "Run a command with a certain string fed to a file descriptor [execline]"
  homeof: "Print the home directory of a user [execline]"
  if: "Perform conditional execution [execline]"
  ifelse: "Perform conditional execution, with two branches [execline]"
  ifte: "Perform a conditional alternative [execline]"
  ifthenelse: "Perform a conditional alternative [execline]"
  importas: "Replace a literal with the value of an environment variable & execute a program [execline]"
  loopwhilex: "Perform a conditional loop [execline]"
  multidefine: "Split a value and define several variables at once & execute a program [execline]"
  multisubstitute: "Perform several substitutions at once in its argv & execute a program [execline]"
  pipeline: "Run two commands with a pipe between them [execline]"
  piperw: "Create a pipe (an anonymous one) & execute a program [execline]"
  posix-cd: "Change the current working directory to a given directory & execute a program [execline]"
  posix-umask: "Change its file mode creation mask & execute a program [execline]"
  redirfd: "Redirect a given file descriptor to a file & execute a program [execline]"
  runblock: "Write execline commands in the execline language [execline]"
  shift: "Shift the positional parameters of an execline script [execline]"
  trap: "Trap signals and run a variety of commands according to the signals it catches [execline]"
  tryexec: "Execute into a command line, with a fallback [execline]"
  umask: "Unsets the umask (file creation mask) & execute a program [execline]"
  unexport: "Remove a variable from the environment & execute a program [execline]"
  wait: "Wait for a set of children & execute a program [execline]"
  withstdinas: "Read the entirety of standard input in an environment variable & execute a program [execline]"
homepage:
  - "https://github.com/skarnet/execline"
license:
  - id: "ISC"
    url: "https://github.com/skarnet/execline/raw/15583497da174dd17b7b44701dcb000f46c235ed/INSTALL"  
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "Built Using ppkg. Check/Report @ https://github.com/leleliu008/ppkg-formula-repository-official-core"
provides:
  - "background"
  - "backtick"
  - "case"
  - "cd"
  - "define"
  - "dollarat"
  - "elgetopt"
  - "elgetpositionals"
  - "elglob"
  - "eltest"
  - "emptyenv"
  - "envfile"
  - "exec"
  - "execlineb"
  - "execline-cd"
  - "execline-umask"
  - "exit"
  - "export"
  - "fdblock"
  - "fdclose"
  - "fdmove"
  - "fdreserve"
  - "fdswap"
  - "forbacktickx"
  - "foreground"
  - "forstdin"
  - "forx"
  - "getcwd"
  - "getpid"
  - "heredoc"
  - "homeof"
  - "if"
  - "ifelse"
  - "ifte"
  - "ifthenelse"
  - "importas"
  - "loopwhilex"
  - "multidefine"
  - "multisubstitute"
  - "pipeline"
  - "piperw"
  - "posix-cd"
  - "posix-umask"
  - "redirfd"
  - "runblock"
  - "shift"
  - "trap"
  - "tryexec"
  - "umask"
  - "unexport"
  - "wait"
  - "withstdinas"
repology:
  - "execline"
src_url:
  - "https://github.com/skarnet/execline"
tag:
  - "Utility"
x_exec:
  host:
    - "aarch64-Linux"
    - "riscv64-Linux"
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    curl -qfsSL "https://meta.pkgforge.dev/misc/PPKG.json" |\
     jq -r '(map(select(.pkg == "execline" and .version != "")) | first) // 
     (map(select((.pkg | test("^execline"; "i")) and .version != "")) | first) | .version // empty' | tr -d '"'\''[:space:]'
  run: |
    #Build
     mkdir -pv "${SBUILD_TMPDIR}/tmp" && docker run --privileged --net="host" --name "alpine-builder" --pull="always" \
     -e "PKG=${PKG}" -e "PKG_ID=${PKG_ID}" -e "PKG_TYPE=${PKG_TYPE}" -e "PKG_VER=${PKG_VER}" \
     -e "PKGVER=${PKGVER}" -e "SBUILD_PKG=${SBUILD_PKG}" -e "SBUILD_PKGVER=${SBUILD_PKGVER}" \
     --volume "${SBUILD_TMPDIR}/tmp:/tmp:rw" \
     "docker.io/alpine:edge" \
      sh -c '
      #Setup ENV
       mkdir -p "/build-bins" && cd "$(mktemp -d)" >/dev/null 2>&1
       apk update && apk upgrade --no-interactive 2>/dev/null
       apk cache clean --purge
      #CoreUtils
       apk add 7zip bash binutils build-base clang coreutils croc curl findutils file g++ git grep jq libc-dev linux-headers moreutils rsync tar tree util-linux xz zstd --latest --upgrade --no-interactive 2>/dev/null
      #ppkg
       curl -qfsSL "https://raw.githubusercontent.com/leleliu008/ppkg/master/ppkg" -o "/usr/local/bin/ppkg"
       chmod -v "a+x" "/usr/local/bin/ppkg"
       ppkg setup
       ppkg update
       [ -d "${HOME}/.ppkg/repos.d/official-core/" ] && git -C "${HOME}/.ppkg/repos.d/official-core/" reset --hard
      #Build: https://github.com/leleliu008/ppkg-formula-repository-official-core/raw/master/formula/execline.yml
       ppkg install "execline" --profile="release" -j "$(($(nproc)+1))" --static
       ppkg tree "execline" --dirsfirst -L 5
      #Copy
       PPKG_BINDIR="$(ppkg tree "execline" --dirsfirst -L 1 | grep -o "/.*/.*" 2>/dev/null | tail -n1 | xargs realpath | tr -d "[:space:]")"
       echo "${PPKG_BINDIR}" | grep -qi "ppkg" && [ -d "${PPKG_BINDIR}" ] || exit 1
       rsync -achLv --exclude="*/" "${PPKG_BINDIR}/bin/." "/build-bins/." 2>/dev/null
       rsync -achLv --exclude="*/" "${PPKG_BINDIR}/libexec/." "/build-bins/." 2>/dev/null
       rsync -achLv --exclude="*/" "${PPKG_BINDIR}/sbin/." "/build-bins/." 2>/dev/null
      #strip & info
       find "/build-bins/" -type f -exec objcopy --remove-section=".comment" --remove-section=".note.*" "{}" \;
       find "/build-bins/" -type f ! -name "*.no_strip" -exec strip --strip-all --verbose "{}" 2>/dev/null \;
       find "/build-bins/" -type f -exec bash -c "echo && realpath {} && readelf --section-headers {} 2>/dev/null" \;
       file "/build-bins/"* && stat -c "%n:         %s Bytes" "/build-bins/"* && \
       du "/build-bins/"* --bytes --human-readable --time --time-style="full-iso" --summarize
      '
    #Copy & Meta
     docker cp "alpine-builder:/build-bins/." "${SBUILD_TMPDIR}/"
     [ -s "${SBUILD_TMPDIR}/LICENSE" ] && cp -fv "${SBUILD_TMPDIR}/LICENSE" "${SBUILD_OUTDIR}/LICENSE"
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type f -exec file -i "{}" \; | grep -Ei "application/.*executable|inode/symlink|text/x-perl|text/.*script" | cut -d":" -f1 | xargs realpath --no-symlinks | xargs -I "{}" rsync -achvL "{}" "${SBUILD_OUTDIR}"