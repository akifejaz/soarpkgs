#!/SBUILD ver @v1.0.0
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/binaries/zstd/static.nixpkgs.stable.yaml
_disabled: false

pkg: "zstd"
pkg_id: "nixpkgs.zstd"
pkg_type: "static"
category:
  - "ConsoleOnly"
  - "Utility"
description: 
  _default: "Zstandard (Zstd) compression utilities"
  pzstd: "Parallelized zstd, a la pigz [zstd]"
  unzstd: "Decompress .zst files [alias=zstd -d] [zstd]"
  zstd: "Zstandard Compression/Decompression Utility [zstd]"
  zstdcat: "Output Zstandard compressed files to stdout [alias=zstd -dcf] [zstd]"
  zstdgrep: "Search Zstandard compressed files using regular expressions [zstd]"
  zstdless: "View Zstandard compressed files with less [zstd]"
  zstdmt: "Multi-threaded zstd [alias=zstd -T0] [zstd]"
distro_pkg:
  alpine:
    - "zstd"
  archlinux:
    aur:
      - "zstd-git"
      - "zstd-static"
  nixpkgs:
    - "zstd"
homepage:
  - "https://facebook.github.io/zstd/"
license:
  - "BSD"  
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "Built Using Nix. Check/Report @ https://github.com/NixOS/nixpkgs"
provides:
  - "pzstd"
  - "unzstd"
  - "zstd"
  - "zstdcat"
  - "zstdgrep"
  - "zstdless"
  - "zstdmt"  
repology:
  - "zstd"
src_url:
  - "https://github.com/facebook/zstd"
tag:
  - "Archiving/Compression"
x_exec:
  bsys: "host://nix"
  host:
    - "aarch64-Linux"
    - "riscv64-Linux"
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    nix derivation show "nixpkgs#zstd" --impure --refresh --quiet 1>&1 2>/dev/null | sed -n '/^[[:space:]]*{/,$p' | jq -r '.. | objects | (select(has("version")).version, (select(has("env")) | select(.env.__json != null) | .env.__json | fromjson | select(has("version")).version) | select(.))' | tr -d '"'\''[:space:]'
  run: |
    #Build
     echo -e "\n" ; nix-instantiate --eval --expr "builtins.toJSON (with import <nixpkgs> {}; ${PKG}.meta)" --quiet 2>/dev/null | jq -r fromjson 2>/dev/null ; echo -e "\n"
     nix-build '<nixpkgs>' --impure --attr "pkgsStatic.zstd" --cores "$(($(nproc)+1))" --max-jobs "$(($(nproc)+1))" --log-format bar-with-logs --out-link "${SBUILD_TMPDIR}/nixbuild"
     find -L "$(find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' | head -n 1)" | sort | awk -F/ '{indent=""; for (i=2; i<NF; i++) indent=indent " "; print (NF>1 ? indent "--> " $NF : $NF)}'
    #Fix Perms
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' |\
     xargs -I{} find -L "{}" -type d -iregex ".*\(bin\|exec\).*" | \
     xargs -I{} sudo rsync -achLv --no-relative "{}/." "${SBUILD_TMPDIR}/."
     sudo chown -R "$(whoami):$(whoami)" "${SBUILD_TMPDIR}" && chmod -R 755 "${SBUILD_TMPDIR}"
    #Fix Shell Scripts
     find "${SBUILD_TMPDIR}" -type f -iregex '.*\.\(bin\|pl\)$' -exec bash -c 'mv -fv "$1" "${1%.*}"' _ "{}" \;
     find "${SBUILD_TMPDIR}" -type f \( -name "*.sh" -o -exec sh -c 'file -i "$1" | grep -qiv "application/.*executable"' sh {} \; \) -print0 | xargs -0 -I {} sh -c '
           sed "s|^#!/nix/store/.*/bin/sh|#!/bin/sh|" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ ]*/bin/\([^ ]*\)|/usr/local/bin/\1|g" -i "{}" 2>/dev/null
           sed "s|/nix/store/[^/]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^/ ]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ \"'\'']*|/|g" -i "{}" 2>/dev/null
       '
    #Copy
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type f -exec file -i "{}" \; | grep -Ei 'application/.*executable|text/x-perl|text/.*script' | cut -d":" -f1 | xargs realpath | sort -u | xargs -I "{}" rsync -achvL "{}" "${SBUILD_OUTDIR}"
     ( askalono --format "json" crawl --follow "${SBUILD_TMPDIR}" | jq -r ".. | objects | .path? // empty" | head -n 1 | xargs -I "{}" cp -fv "{}" "${SBUILD_OUTDIR}/LICENSE" ) 2>/dev/null