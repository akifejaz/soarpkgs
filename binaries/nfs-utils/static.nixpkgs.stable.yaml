#!/SBUILD ver @v1.0.0
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/binaries/nfs-utils/static.nixpkgs.stable.yaml
_disabled: false

pkg: "nfs-utils"
pkg_id: "nixpkgs.nfs-utils"
pkg_type: "static"
category:
  - "ConsoleOnly"
  - "Utility"
description: 
  _default: "Linux NFS client and server utilities"
  blkmapd: "pNFS block layout mapping daemon [nfs-utils]"
  exportfs: "Maintain table of exported NFS file systems [nfs-utils]"
  mount.nfs: "Mount a Network File System [nfs-utils]"
  mount.nfs4: "Mount a Network File System (v4) [nfs-utils]"
  mountstats: "Display various NFS client per-mount statistics [nfs-utils]"
  nfsconf: "Query various NFS configuration settings [nfs-utils]"
  nfsdcld: "NFSv4 Client Tracking Daemon [nfs-utils]"
  nfsdclddb: "Tool for manipulating the nfsdcld sqlite database [nfs-utils]"
  nfsdclnts: "Print various nfs client information for knfsd server [nfs-utils]"
  nfsdcltrack: "NFSv4 Client Tracking Callout Program [nfs-utils]"
  nfsidmap: "The NFS idmapper upcall program [nfs-utils]"
  nfsiostat: "Emulate iostat for NFS mount points using /proc/self/mountstats [nfs-utils]"
  nfsstat: "List NFS statistics [nfs-utils]"
  rpcctl: "Display SunRPC connection information [nfs-utils]"
  rpcdebug: "Set/Clear NFS and RPC kernel debug flags [nfs-utils]"
  rpc.gssd: "RPCSEC_GSS daemon [nfs-utils]"
  rpc.idmapd: "NFSv4 ID <-> Name Mapper daemon [nfs-utils]"
  rpc.mountd: "NFS mount daemon [nfs-utils]"
  rpc.nfsd: "NFS server process daemon [nfs-utils]"
  rpc.statd: "NSM service daemon [nfs-utils]"
  rpc.svcgssd: "Server-side rpcsec_gss daemon [nfs-utils]"
  showmount: "Show mount information for an NFS server [nfs-utils]"
  sm-notify: "Send reboot notifications to NFS peers [nfs-utils]"
  start-statd: "Script to start statd [nfs-utils]"
  umount.nfs: "Unmount a Network File System [nfs-utils]"
  umount.nfs4: "Unmount a Network File System (v4) [nfs-utils]"
distro_pkg:
  alpine:
    - "nfs-utils"
  debian:
    - "nfs-utils"
  nixpkgs:
    - "nfs-utils"
homepage:
  - "https://git.linux-nfs.org/%3Fp=steved/nfs-utils.git"
  - "https://linux-nfs.org"
  - "https://sourceforge.net/projects/nfs"
license:
  - "GPL"
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "Built Using Nix. Check/Report @ https://github.com/NixOS/nixpkgs"  
provides:
  - "blkmapd"
  - "exportfs"
  - "mount.nfs"
  - "mount.nfs4"
  - "mountstats"
  - "nfsconf"
  - "nfsdcld"
  - "nfsdclddb"
  - "nfsdclnts"
  - "nfsdcltrack"
  - "nfsidmap"
  - "nfsiostat"
  - "nfsstat"
  - "rpcctl"
  - "rpcdebug"
  - "rpc.gssd"
  - "rpc.idmapd"
  - "rpc.mountd"
  - "rpc.nfsd"
  - "rpc.statd"
  - "rpc.svcgssd"
  - "showmount"
  - "sm-notify"
  - "start-statd"
  - "umount.nfs"
  - "umount.nfs4"
repology:
  - "nfs-utils"
src_url:
  - "https://git.linux-nfs.org/%3Fp=steved/nfs-utils.git"
tag:
  - "nfs"
x_exec:
  host:
    - "aarch64-Linux"
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    nix derivation show "nixpkgs#nfs-utils" --impure --refresh --quiet 1>&1 2>/dev/null | sed -n '/^[[:space:]]*{/,$p' | jq -r '.. | objects | (select(has("version")).version, (select(has("env")) | select(.env.__json != null) | .env.__json | fromjson | select(has("version")).version) | select(.))' | tr -d '[:space:]'
  run: |
    #Build
     echo -e "\n" ; nix-instantiate --eval --expr "builtins.toJSON (with import <nixpkgs> {}; ${PKG}.meta)" --quiet 2>/dev/null | jq -r fromjson 2>/dev/null ; echo -e "\n"
     nix-build '<nixpkgs>' --impure --attr "pkgsStatic.nfs-utils" --cores "$(($(nproc)+1))" --max-jobs "$(($(nproc)+1))" --log-format bar-with-logs --out-link "${SBUILD_TMPDIR}/nixbuild"
     find -L "$(find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' | head -n 1)" | sort | awk -F/ '{indent=""; for (i=2; i<NF; i++) indent=indent " "; print (NF>1 ? indent "--> " $NF : $NF)}'
    #Fix Perms
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' |\
     xargs -I{} find -L "{}" -type d -iregex ".*\(bin\|exec\).*" | \
     xargs -I{} sudo rsync -achLv --no-relative "{}/." "${SBUILD_TMPDIR}/."
     sudo chown -Rv "$(whoami):$(whoami)" "${SBUILD_TMPDIR}" && chmod -Rv 755 "${SBUILD_TMPDIR}"
    #Fix Shell Scripts
     find "${SBUILD_TMPDIR}" -type f -iregex '.*\.\(bin\|pl\)$' -exec bash -c 'mv -fv "$1" "${1%.*}"' _ "{}" \;
     find "${SBUILD_TMPDIR}" -type f \( -name "*.sh" -o -exec sh -c 'file -i "$1" | grep -qiv "application/.*executable"' sh {} \; \) -print0 | xargs -0 -I {} sh -c '
           sed "s|^#!/nix/store/.*/bin/sh|#!/bin/sh|" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ ]*/bin/\([^ ]*\)|/usr/local/bin/\1|g" -i "{}" 2>/dev/null
           sed "s|/nix/store/[^/]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^/ ]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ \"'\'']*|/|g" -i "{}" 2>/dev/null
       '
    #Copy
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type f -exec file -i "{}" \; | grep -Ei 'application/.*executable|text/x-perl|text/x-shellscript' | cut -d":" -f1 | xargs realpath | sort -u | xargs -I "{}" rsync -achvL "{}" "${SBUILD_OUTDIR}"
     ( askalono --format "json" crawl --follow "${SBUILD_TMPDIR}" | jq -r ".. | objects | .path? // empty" | head -n 1 | xargs -I "{}" cp -fv "{}" "${SBUILD_OUTDIR}/LICENSE" ) 2>/dev/null 