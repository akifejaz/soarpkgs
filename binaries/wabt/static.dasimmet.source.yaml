#!/SBUILD ver @v1.0.0    
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/binaries/wabt/static.dasimmet.source.yaml
_disabled: false

pkg: "wabt"
pkg_id: "github.com.dasimmet.wabt.source"
pkg_type: "static"
category:
  - "ConsoleOnly"
  - "Utility"
description: 
  _default: "The WebAssembly Binary Toolkit"
  spectest-interp: "Read a Spectest JSON file, and run its tests in the interpreter [binaryen+wabt]"
  wasm-as: "Assemble WebAssembly in text format [binaryen+wabt]"
  wasm-ctor-eval: "A tool that can execute functions (or parts of functions) at compile time [binaryen+wabt]"
  wasm-decompile: "Decompile a wasm binary into readable C-like syntax [binaryen+wabt]"
  wasm-dis: "Un-assemble WebAssembly in binary format into text format [binaryen+wabt]"
  wasm-emscripten-finalize: "Take a wasm binary produced by llvm+lld and performs emscripten-specific passes over it [binaryen+wabt]"
  wasm-interp: "Decode and run a WebAssembly binary file using a stack-based interpreter [binaryen+wabt]"
  wasm-merge: "Merge multiple wasm files into a single file [binaryen+wabt]"
  wasm-metadce: "A tool to remove parts of Wasm files in a flexible way [binaryen+wabt]"
  wasm-objdump: "Print information about a wasm binary [binaryen+wabt]"
  wasm-opt: "Load WebAssembly and runs Binaryen IR passes on it [binaryen+wabt]"
  wasm-reduce: "A testcase reducer for WebAssembly files [binaryen+wabt]"
  wasm-shell: "A shell that can load and interpret WebAssembly code [binaryen+wabt]"
  wasm-stats: "Output stats for a WASM module [binaryen+wabt]"
  wasm-strip: "Remove sections of a WebAssembly binary file [binaryen+wabt]"
  wasm-validate: "Validate a file in the WebAssembly binary format [binaryen+wabt]"
  wasm2c: "Convert a WebAssembly binary file to a C source and header [binaryen+wabt]"
  wasm2wat: "Translate from the binary format back to the text format [binaryen+wabt]"
  wast2json: "Convert a file in the wasm spec test format to a JSON file and associated wasm binary files [binaryen+wabt]"
  wat-desugar: "Parse .wat text form and print 'canonical' flat format [binaryen+wabt]"
  wat2wasm: "Translate from the text format to the Binary Format [binaryen+wabt]"
homepage:
  - "https://github.com/dasimmet/wabt"
license:
  - id: "Apache-2.0"
    url: "https://github.com/dasimmet/wabt/raw/e304325216b8b9c36ad3bdbe66fba8ca0bc59060/LICENSE"
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "Built From Source (Latest Git HEAD). Check/Report @ https://github.com/dasimmet/wabt"
  - "This use zig to build everything"
provides:
  - "spectest-interp"
  - "wasm-as"
  - "wasm-ctor-eval"
  - "wasm-decompile"
  - "wasm-dis"
  - "wasm-emscripten-finalize"
  - "wasm-fuzz-lattices"
  - "wasm-fuzz-types"
  - "wasm-interp"
  - "wasm-merge"
  - "wasm-metadce"
  - "wasm-objdump"
  - "wasm-opt"
  - "wasm-reduce"
  - "wasm-shell"
  - "wasm-stats"
  - "wasm-strip"
  - "wasm-validate"
  - "wasm2c"
  - "wasm2wat"
  - "wasm2wat-fuzz"
  - "wast2json"
  - "wat-desugar"
  - "wat2wasm"
#repology:
#  - "wabt"
src_url:
  - "https://github.com/dasimmet/wabt"
tag:
  - "Utility"
x_exec:
  host:
    - "aarch64-Linux"
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    pushd "$(mktemp -d)" >/dev/null 2>&1 && \
    git clone --depth="1" --filter="blob:none" --no-checkout --single-branch --quiet "https://github.com/dasimmet/wabt" "./TEMPREPO" >/dev/null 2>&1 && \
    git --git-dir="./TEMPREPO/.git" --no-pager log -1 --pretty=format:'HEAD-%h-%cd' --date=format:'%y%m%dT%H%M%S' && \
    [ -d "$(realpath .)/TEMPREPO" ] && rm -rf "$(realpath .)" >/dev/null 2>&1 && popd >/dev/null 2>&1
  run: |
    #Build
     mkdir -pv "${SBUILD_TMPDIR}/tmp" && docker run --privileged --net="host" --name "alpine-builder" --pull="always" \
     -e "PKG=${PKG}" -e "PKG_ID=${PKG_ID}" -e "PKG_TYPE=${PKG_TYPE}" -e "PKG_VER=${PKG_VER}" \
     -e "PKGVER=${PKGVER}" -e "SBUILD_PKG=${SBUILD_PKG}" -e "SBUILD_PKGVER=${SBUILD_PKGVER}" \
     --volume "${SBUILD_TMPDIR}/tmp:/tmp:rw" \
     "ghcr.io/pkgforge/devscripts/alpine-builder:latest" \
      bash -l -c '
      #Setup ENV
       set -x ; mkdir -p "/build-bins" && pushd "$(mktemp -d)" &>/dev/null
      #Build
       git clone --filter "blob:none" --depth="1" --quiet "https://github.com/dasimmet/wabt" "./TEMPREPO" && cd "./TEMPREPO"
       export ZIG_TARGET="$(uname -m)-linux-musl"
       echo -e "\n[+] Target: \"${ZIG_TARGET}\""
       zig build --prefix "./STATIC_BUILD" \
          -Dtarget="${ZIG_TARGET}" \
          -Doptimize="ReleaseFast" \
          -j"$(($(nproc)+1))" \
          --release="fast" \
          --summary "all" \
          --verbose-link \
          --verbose-air \
          --verbose-cimport \
          --verbose-cc \
          --verbose-llvm-cpu-features
       find "./STATIC_BUILD" -type f -exec file -i "{}" \; | grep -Ei "application/.*executable|inode/symlink|text/x-perl|text/.*script" | cut -d":" -f1 | xargs realpath | xargs -I "{}" sh -c '\''echo "File: {}"; readelf -p ".comment" "{}"'\''
      #Copy
       find "./STATIC_BUILD" -type f -exec file -i "{}" \; | grep -Ei "application/.*executable|inode/symlink|text/x-perl|text/.*script" | cut -d":" -f1 | xargs realpath --no-symlinks | xargs -I "{}" rsync -achvL "{}" "/build-bins/"
       ( askalono --format "json" crawl --follow "$(realpath .)" | jq -r ".. | objects | .path? // empty" | head -n 1 | xargs -I "{}" cp -fv "{}" "/build-bins/LICENSE" ) 2>/dev/null
      #strip & info 
       find "/build-bins/" -type f -exec objcopy --remove-section=".comment" --remove-section=".note.*" "{}" \;
       find "/build-bins/" -type f ! -name "*.no_strip" -exec strip --strip-all --verbose "{}" 2>/dev/null \;
       find "/build-bins/" -type f -exec bash -c "echo && realpath {} && readelf --section-headers {} 2>/dev/null" \;
       file "/build-bins/"* && stat -c "%n:         %s Bytes" "/build-bins/"* && \
       du "/build-bins/"* --bytes --human-readable --time --time-style="full-iso" --summarize
       popd >/dev/null 2>&1
      '
    #Copy & Meta
     docker cp "alpine-builder:/build-bins/." "${SBUILD_TMPDIR}/"
     [ -s "${SBUILD_TMPDIR}/LICENSE" ] && cp -fv "${SBUILD_TMPDIR}/LICENSE" "${SBUILD_OUTDIR}/LICENSE"
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type f -exec file -i "{}" \; | grep -Ei "application/.*executable|inode/symlink|text/x-perl|text/.*script" | cut -d":" -f1 | xargs realpath --no-symlinks | xargs -I "{}" rsync -achvL "{}" "${SBUILD_OUTDIR}"