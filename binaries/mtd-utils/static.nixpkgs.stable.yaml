#!/SBUILD ver @v1.0.0
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/binaries/mtd-utils/static.nixpkgs.stable.yaml
_disabled: false

pkg: "mtdutils"
pkg_id: "nixpkgs.mtdutils"
pkg_type: "static"
category:
  - "ConsoleOnly"
  - "Utility"
description: 
  _default: "Tools for MTD filesystems [mtd-utils]"
  checkfs: "Check MTD filesystems [mtd-utils]"
  docfdisk: "Modify INFTL partition tables [mtd-utils]"
  doc_loadbios: "Load/Write a firmware file to a flash device with IPL handling [mtd-utils]"
  fectest: "Encode/Decode data using FEC, checking integrity [mtd-utils]"
  filljffs2.sh: "A script to fill an MTD device [mtd-utils]"
  flashcp: "A utility for copying firmware images to flash devices [mtd-utils]"
  flash_erase: "Erase MTD devices [mtd-utils]"
  flash_eraseall: "Erase MTD devices [alias=flash_erase] [mtd-utils]"
  flash_lock: "Lock sectors of flash devices [mtd-utils]"
  flash_otp_dump: "Display One-Time-Programm data [mtd-utils]"
  flash_otp_erase: "Erase area of One-Time-Program data [mtd-utils]"
  flash_otp_info: "Print info about One-Time-Programm data [mtd-utils]"
  flash_otp_lock: "Lock area of One-Time-Program data [mtd-utils]"
  flash_otp_write: "write One-Time-Program data [mtd-utils]"
  flash_readtest: "Check MTD device read [mtd-utils]"
  flash_speed: "Test read and write speed of a MTD device [mtd-utils]"
  flash_stress: "Test random reads, writes and erases on MTD device [mtd-utils]"
  flash_torture: "Torture test random reads, writes and erases on MTD device [mtd-utils]"
  flash_unlock: "Unlock sectors of flash devices [mtd-utils]"
  free_space: "Display the free space of the file system [mtd-utils]"
  fs_help_all.sh: "Print Help for All [mtd-utils]"
  fs_run_all.sh: "Run All Tests [mtd-utils]"
  fs_stress00.sh: "Stress MTD fs [mtd-utils]"
  fs_stress01.sh: "Stress MTD fs [mtd-utils]"
  fstest_monitor: "Monitor stats for an MTD Device [mtd-utils]"
  ftl_check: "Utility to check an FTL partition in a memory region [mtd-utils]"
  ftl_format: "Utility to format an FTL partition in a memory region [mtd-utils]"
  ftrunc: "Truncate a large test file [mtd-utils]"
  fwrite00: "Write a large test file [mtd-utils]"
  gcd_hupper: "Send HUP signals to gcd [mtd-utils]"
  integ: "Get Integrity of the Filesystem [mtd-utils]"
  integck: "Check Integrity of the Filesystem [mtd-utils]"
  io_basic: "Basic input/output tests for MTD devices [mtd-utils]"
  io_paral: "Parallel input/output tests for MTD devices [mtd-utils]"
  io_read: "Read tests for MTD devices [mtd-utils]"
  io_update: "Update tests for MTD devices [mtd-utils]"
  jffs2dump: "Dump the contents of a JFFS2 file system image [mtd-utils]"
  jffs2reader: "Read contents of JFFS2 images [mtd-utils]"
  JitterTest: "Test timing jitter on MTD operations [mtd-utils]"
  load_nandsim.sh: "Script to load NAND simulator module [mtd-utils]"
  lsmtd: "List memory technology devices [mtd-utils]"
  makefiles: "Create test files for MTD filesystem testing [mtd-utils]"
  mkfs.jffs2: "Create a JFFS2 file system image from directory [mtd-utils]"
  mkfs.ubifs: "Make a UBIFS file system image from an existing directory tree [mtd-utils]"
  mkvol_bad: "Test volume creation with bad blocks [mtd-utils]"
  mkvol_basic: "Basic volume creation tests [mtd-utils]"
  mkvol_paral: "Parallel volume creation tests [mtd-utils]"
  mount.ubifs: "A script that mounts a UBIFS volume from an MTD device to a specified directory [mtd-utils]"
  mtd_debug: "Debug an MTD Device [mtd-utils]"
  mtdinfo: "An utility to get MTD information [mtd-utils]"
  mtdpart: "Add/Remove a partition from an MTD device [mtd-utils]"
  nandbiterrs: "Simulate bit errors in NAND devices [mtd-utils]"
  nanddump: "Dump contents of NAND flash devices [mtd-utils]"
  nandflipbits: "Flip bits in NAND flash for testing [mtd-utils]"
  nandpagetest: "Test NAND page read/write operations [mtd-utils]"
  nandsubpagetest: "Test NAND subpage operations [mtd-utils]"
  nandtest: "NAND flash memory testing tool [mtd-utils]"
  nandwrite: "Write to NAND flash devices [mtd-utils]"
  nftldump: "Dump NFTL (NAND Flash Translation Layer) contents [mtd-utils]"
  nftl_format: "Format NFTL partitions [mtd-utils]"
  orph: "Handle orphaned nodes in filesystems [mtd-utils]"
  pdfrun: "Run performance and data flow tests [mtd-utils]"
  perf: "Performance testing utility for MTD devices [mtd-utils]"
  plotJittervsFill: "Plot jitter vs fill level graphs [mtd-utils]"
  recv_image: "Receive MTD filesystem images [mtd-utils]"
  rfddump: "Dump contents of resident flash disk [mtd-utils]"
  rfdformat: "Format resident flash disks [mtd-utils]"
  rmdir00: "Directory removal stress test [mtd-utils]"
  rndrm00: "Random file removal test [mtd-utils]"
  rndrm99: "Extended random file removal test [mtd-utils]"
  rndwrite00: "Random write test [mtd-utils]"
  rsvol: "Resize volume test [mtd-utils]"
  runubitests.sh: "Run complete UBI test suite [mtd-utils]"
  serve_image: "Serve MTD filesystem images [mtd-utils]"
  stress_1: "Basic stress test for MTD filesystems [mtd-utils]"
  stress_2: "Advanced stress test for MTD filesystems [mtd-utils]"
  stress_3: "Extended stress test for MTD filesystems [mtd-utils]"
  sumtool: "Summary tool for JFFS2 filesystem images [mtd-utils]"
  test_1: "Basic MTD filesystem test [mtd-utils]"
  test_2: "Extended MTD filesystem test [mtd-utils]"
  ubiattach: "Attach MTD devices with UBI which creates corresponding UBI devices [mtd-utils]"
  ubiblock: "Manage block interfaces for UBI volumes [mtd-utils]"
  ubicrc32: "Calculate CRC-32 checksum of a file with the same initial seed as UBI would use [mtd-utils]"
  ubidetach: "Detach MTD devices from UBI devices [mtd-utils]"
  ubiformat: "Format/Erase flashes, preserve erase counters, and flash UBI images to MTD devices [mtd-utils]"
  ubihealthd: "Daemon that monitors/manages UBI device health [mtd-utils]"
  ubimkvol: "Create UBI volumes on UBI devices [mtd-utils]"
  ubinfo: "Provide information about UBI devices and volumes found in the system [mtd-utils]"
  ubinize: "A tool for generating UBI images [mtd-utils]"
  ubirename: "An utility to get/rename UBI volumes [mtd-utils]"
  ubirmvol: "Remove UBI volumes from UBI devices [mtd-utils]"
  ubirsvol: "An utility to resize UBI volumes [mtd-utils]"
  ubiscan: "An utility to scan MTD devices [mtd-utils]"
  ubi-stress-test.sh: "Stress test for UBI subsystem [mtd-utils]"
  ubiupdatevol: "Update UBI volumes [mtd-utils]"
  volrefcnt: "Volume reference count utility [mtd-utils]"  
distro_pkg:
  alpine:
    - "mtd-utils"
  archlinux:
    extra:
      - "mtd-utils"
  debian:
    - "mtd-utils"
  nixpkgs:
    - "mtdutils"
homepage:
  - "http://www.linux-mtd.infradead.org/"
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "Built Using Nix. Check/Report @ https://github.com/NixOS/nixpkgs"
provides:
  - "checkfs"
  - "docfdisk"
  - "doc_loadbios"
  - "fectest"
  - "filljffs2.sh"
  - "flashcp"
  - "flash_erase"
  - "flash_eraseall"
  - "flash_lock"
  - "flash_otp_dump"
  - "flash_otp_erase"
  - "flash_otp_info"
  - "flash_otp_lock"
  - "flash_otp_write"
  - "flash_readtest"
  - "flash_speed"
  - "flash_stress"
  - "flash_torture"
  - "flash_unlock"
  - "free_space"
  - "fs_help_all.sh"
  - "fs_run_all.sh"
  - "fs_stress00.sh"
  - "fs_stress01.sh"
  - "fstest_monitor"
  - "ftl_check"
  - "ftl_format"
  - "ftrunc"
  - "fwrite00"
  - "gcd_hupper"
  - "integ"
  - "integck"
  - "io_basic"
  - "io_paral"
  - "io_read"
  - "io_update"
  - "jffs2dump"
  - "jffs2reader"
  - "JitterTest"
  - "load_nandsim.sh"
  - "lsmtd"
  - "makefiles"
  - "mkfs.jffs2"
  - "mkfs.ubifs"
  - "mkvol_bad"
  - "mkvol_basic"
  - "mkvol_paral"
  - "mount.ubifs"
  - "mtd_debug"
  - "mtdinfo"
  - "mtdpart"
  - "nandbiterrs"
  - "nanddump"
  - "nandflipbits"
  - "nandpagetest"
  - "nandsubpagetest"
  - "nandtest"
  - "nandwrite"
  - "nftldump"
  - "nftl_format"
  - "orph"
  - "pdfrun"
  - "perf"
  - "plotJittervsFill"
  - "recv_image"
  - "rfddump"
  - "rfdformat"
  - "rmdir00"
  - "rndrm00"
  - "rndrm99"
  - "rndwrite00"
  - "rsvol"
  - "runubitests.sh"
  - "serve_image"
  - "stress_1"
  - "stress_2"
  - "stress_3"
  - "sumtool"
  - "test_1"
  - "test_2"
  - "ubiattach"
  - "ubiblock"
  - "ubicrc32"
  - "ubidetach"
  - "ubiformat"
  - "ubihealthd"
  - "ubimkvol"
  - "ubinfo"
  - "ubinize"
  - "ubirename"
  - "ubirmvol"
  - "ubirsvol"
  - "ubiscan"
  - "ubi-stress-test.sh"
  - "ubiupdatevol"
  - "volrefcnt"  
repology:
  - "mtdutils"
src_url:
  - "https://git.infradead.org/mtd-utils.git"
tag:
  - "mtd"
x_exec:
  bsys: "host://nix"
  host:
    - "aarch64-Linux"
    - "riscv64-Linux"
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    nix derivation show "nixpkgs#mtdutils" --impure --refresh --quiet 1>&1 2>/dev/null | sed -n '/^[[:space:]]*{/,$p' | jq -r '.. | objects | (select(has("version")).version, (select(has("env")) | select(.env.__json != null) | .env.__json | fromjson | select(has("version")).version) | select(.))' | tr -d '"'\''[:space:]'
  run: |
    #Build
     echo -e "\n" ; nix-instantiate --eval --expr "builtins.toJSON (with import <nixpkgs> {}; ${PKG}.meta)" --quiet 2>/dev/null | jq -r fromjson 2>/dev/null ; echo -e "\n"
     nix-build '<nixpkgs>' --impure --attr "pkgsStatic.mtdutils" --cores "$(($(nproc)+1))" --max-jobs "$(($(nproc)+1))" --log-format bar-with-logs --out-link "${SBUILD_TMPDIR}/nixbuild"
     find -L "$(find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' | head -n 1)" | sort | awk -F/ '{indent=""; for (i=2; i<NF; i++) indent=indent " "; print (NF>1 ? indent "--> " $NF : $NF)}'
    #Fix Perms
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' |\
     xargs -I{} find -L "{}" -type d -iregex ".*\(bin\|exec\).*" | \
     xargs -I{} sudo rsync -achLv --no-relative "{}/." "${SBUILD_TMPDIR}/."
     sudo chown -R "$(whoami):$(whoami)" "${SBUILD_TMPDIR}" && chmod -R 755 "${SBUILD_TMPDIR}"
    #Fix Shell Scripts
     find "${SBUILD_TMPDIR}" -type f -iregex '.*\.\(bin\|pl\)$' -exec bash -c 'mv -fv "$1" "${1%.*}"' _ "{}" \;
     find "${SBUILD_TMPDIR}" -type f \( -name "*.sh" -o -exec sh -c 'file -i "$1" | grep -qiv "application/.*executable"' sh {} \; \) -print0 | xargs -0 -I {} sh -c '
           sed "s|^#!/nix/store/.*/bin/sh|#!/bin/sh|" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ ]*/bin/\([^ ]*\)|/usr/local/bin/\1|g" -i "{}" 2>/dev/null
           sed "s|/nix/store/[^/]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^/ ]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ \"'\'']*|/|g" -i "{}" 2>/dev/null
       '
    #Copy
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type f -exec file -i "{}" \; | grep -Ei 'application/.*executable|text/x-perl|text/.*script' | cut -d":" -f1 | xargs realpath | sort -u | xargs -I "{}" rsync -achvL "{}" "${SBUILD_OUTDIR}"
     ( askalono --format "json" crawl --follow "${SBUILD_TMPDIR}" | jq -r ".. | objects | .path? // empty" | head -n 1 | xargs -I "{}" cp -fv "{}" "${SBUILD_OUTDIR}/LICENSE" ) 2>/dev/null