#!/SBUILD ver @v1.0.0
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/binaries/mtools/static.nixpkgs.stable.yaml
_disabled: false

pkg: "mtools"
pkg_id: "nixpkgs.mtools"
pkg_type: "static"
category:
  - "ConsoleOnly"
  - "Utility"
description: 
  _default: "Utilities to access MS-DOS disks"
  lz: "Gunzip and show a listing of a gzip'd tar'd archive [mtools]"
  mattrib: "Change MSDOS file attribute flags [mtools]"
  mbadblock: "Tests a floppy disk, and mark the bad blocks in the FAT [mtools]"
  mcat: "Dump raw disk image [mtools]"
  mcd: "Change MSDOS directory [mtools]"
  mcheck: "Verify all files on an MS-DOS formatted disk [mtools]"
  mclasserase: "Erase memory cards [mtools]"
  mcomp: "Compares two files [mtools]"
  mcopy: "Copy MSDOS files to/from Unix [mtools]"
  mdel: "Delete an MSDOS file [mtools]"
  mdeltree: "Recursively delete an MSDOS directory and its contents [mtools]"
  mdir: "Display an MSDOS directory [mtools]"
  mdoctorfat: "Doctor the allocation table of a file [mtools]"
  mdu: "Display the amount of space occupied by an MSDOS directory [mtools]"
  mformat: "Add an MSDOS filesystem to a low-level formatted floppy disk [mtools]"
  minfo: "Print the parameters of a MSDOS filesystem [mtools]"
  mkmanifest: "Make list of file names and their DOS 8+3 equivalent [mtools]"
  mlabel: "Make an MSDOS volume label [mtools]"
  mmd: "Make an MSDOS subdirectory [mtools]"
  mmount: "Mount an MSDOS disk [mtools]"
  mmove: "Move/Rename an MSDOS file or subdirectory [mtools]"
  mpartition: "Partition an MSDOS hard disk [mtools]"
  mrd: "Remove an MSDOS subdirectory [mtools]"
  mren: "Rename an existing MSDOS file [mtools]"
  mshortname: "Show short name of a file [mtools]"
  mshowfat: "Show FAT clusters allocated to file [mtools]"
  mtools: "Utilities to access DOS disks in Unix [mtools]"
  mtoolstest: "Tests and Display the configuration [mtools]"
  mtype: "Display contents of an MSDOS file [mtools]"
  mxtar: "Wrapper for using GNU tar directly from a floppy disk [mtools]"
  mzip: "Change protection mode and eject disk on Zip/Jaz drive [mtools]"
  tgz: "Make a gzip'd tar archive [mtools]"
  uz: "Gunzip and Extract a gzip'd tar'd archive [mtools]"  
homepage:
  - "https://www.gnu.org/software/mtools"
license:
  - "GPL-3.0"
#license:
#  - id: "MIT"
#    url: "https://github.com/google/mtools/raw/9c91b6a295b9074a1ad78956c72c23b897cd0080/LICENSE"
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "Built Using Nix. Check/Report @ https://github.com/NixOS/nixpkgs"
provides:
  - "lz"
  - "mattrib"
  - "mbadblock"
  - "mcat"
  - "mcd"
  - "mcheck"
  - "mcomp"
  - "mcopy"
  - "mdel"
  - "mdeltree"
  - "mdir"
  - "mdoctorfat"
  - "mdu"
  - "mformat"
  - "minfo"
  - "mkmanifest"
  - "mlabel"
  - "mmd"
  - "mmount"
  - "mmove"
  - "mpartition"
  - "mrd"
  - "mren"
  - "mshortname"
  - "mshowfat"
  - "mtools"
  - "mtoolstest"
  - "mtype"
  - "mxtar"
  - "mzip"
  - "tgz"
  - "uz"
repology:
  - "mtools"
src_url:
  - "https://github.com/google/mtools"
tag:
  - "Utility"
x_exec:
  bsys: "host://nix"
  host:
    - "aarch64-Linux"
    - "riscv64-Linux"
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    nix derivation show "nixpkgs#mtools" --impure --refresh --quiet 1>&1 2>/dev/null | sed -n '/^[[:space:]]*{/,$p' | jq -r '.. | objects | (select(has("version")).version, (select(has("env")) | select(.env.__json != null) | .env.__json | fromjson | select(has("version")).version) | select(.))' | tr -d '"'\''[:space:]'
  run: |
    #Build
     echo -e "\n" ; nix-instantiate --eval --expr "builtins.toJSON (with import <nixpkgs> {}; ${PKG}.meta)" --quiet 2>/dev/null | jq -r fromjson 2>/dev/null ; echo -e "\n"
     nix-build '<nixpkgs>' --impure --attr "pkgsStatic.mtools" --cores "$(($(nproc)+1))" --max-jobs "$(($(nproc)+1))" --log-format bar-with-logs --out-link "${SBUILD_TMPDIR}/nixbuild"
     find -L "$(find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' | head -n 1)" | sort | awk -F/ '{indent=""; for (i=2; i<NF; i++) indent=indent " "; print (NF>1 ? indent "--> " $NF : $NF)}'
    #Fix Perms
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' |\
     xargs -I{} find -L "{}" -type d -iregex ".*\(bin\|exec\).*" | \
     xargs -I{} sudo rsync -achLv --no-relative "{}/." "${SBUILD_TMPDIR}/."
     sudo chown -R "$(whoami):$(whoami)" "${SBUILD_TMPDIR}" && chmod -R 755 "${SBUILD_TMPDIR}"
    #Fix Shell Scripts
     find "${SBUILD_TMPDIR}" -type f -iregex '.*\.\(bin\|pl\)$' -exec bash -c 'mv -fv "$1" "${1%.*}"' _ "{}" \;
     find "${SBUILD_TMPDIR}" -type f \( -name "*.sh" -o -exec sh -c 'file -i "$1" | grep -qiv "application/.*executable"' sh {} \; \) -print0 | xargs -0 -I {} sh -c '
           sed "s|^#!/nix/store/.*/bin/sh|#!/bin/sh|" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ ]*/bin/\([^ ]*\)|/usr/local/bin/\1|g" -i "{}" 2>/dev/null
           sed "s|/nix/store/[^/]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^/ ]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ \"'\'']*|/|g" -i "{}" 2>/dev/null
       '
    #Copy
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type f -exec file -i "{}" \; | grep -Ei 'application/.*executable|text/x-perl|text/.*script' | cut -d":" -f1 | xargs realpath | sort -u | xargs -I "{}" rsync -achvL "{}" "${SBUILD_OUTDIR}"
     ( askalono --format "json" crawl --follow "${SBUILD_TMPDIR}" | jq -r ".. | objects | .path? // empty" | head -n 1 | xargs -I "{}" cp -fv "{}" "${SBUILD_OUTDIR}/LICENSE" ) 2>/dev/null