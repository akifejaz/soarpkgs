#!/SBUILD ver @v1.0.0
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/binaries/sudo/static.nixpkgs.stable.yaml
_disabled: false

pkg: "sudo"
pkg_id: "nixpkgs.sudo"
pkg_type: "static"
category:
  - "ConsoleOnly"
  - "Utility"
description: 
  _default: "Tools for privilege escalation, secure command execution, and sudo policy management"
  cvtsudoers: "Convert between sudoers file formats [sudo]"
  sudo: "Execute a command as another user [sudo]"
  sudo.conf: "Configuration for sudo front-end [sudo]"
  sudo_logsrvd: "sudo event and I/O log server [sudo]"
  sudo_logsrvd.conf: "Configuration for sudo_logsrvd [sudo]"
  sudo_sendlog: "Send sudo I/O log to log server [sudo]"
  sudoedit: "An extension of the sudo -e command to edit a file [sudo]"
  sudoers: "Default sudo security policy plugin [sudo]"
  sudoers.dist: "Default configuration file for sudoers [sudo]"
  sudoreplay: "Replay sudo session logs [sudo]"
  visudo: "Edit the sudoers file [sudo]"
distro_pkg:
  alpine:
    - "sudo"
  archlinux:
    aur:
      - "sudo-git"
  debian:
    - "sudo"
  nixpkgs:
    - "sudo"
homepage:
  - "https://www.sudo.ws/"
license:
  - "BSD"  
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "Built Using Nix. Check/Report @ https://github.com/NixOS/nixpkgs"  
  - "sudo must be owned by uid 0 and have the setuid bit set (RUN: sudo chown 'root:root' sudo ; sudo chmod 'a=rx,u+ws' sudo)"
provides:  
  - "cvtsudoers"
  - "sudo"
  - "sudo.conf"
  - "sudo_logsrvd"
  - "sudo_logsrvd.conf"
  - "sudo_sendlog"
  - "sudoedit"
  - "sudoers"
  - "sudoers.dist"
  - "sudoreplay"
  - "visudo"
repology:
  - "sudo"
src_url:
  - "https://github.com/sudo-project/sudo"
tag:
  - "security"
  - "sudo"
x_exec:
  host:
    - "aarch64-Linux"
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    nix derivation show "nixpkgs#sudo" --impure --refresh --quiet 1>&1 2>/dev/null | sed -n '/^[[:space:]]*{/,$p' | jq -r '.. | objects | (select(has("version")).version, (select(has("env")) | select(.env.__json != null) | .env.__json | fromjson | select(has("version")).version) | select(.))' | tr -d '[:space:]'
  run: |
    #Build
     echo -e "\n" ; nix-instantiate --eval --expr "builtins.toJSON (with import <nixpkgs> {}; ${PKG}.meta)" --quiet 2>/dev/null | jq -r fromjson 2>/dev/null ; echo -e "\n"
     nix-build '<nixpkgs>' --impure --attr "pkgsStatic.sudo" --cores "$(($(nproc)+1))" --max-jobs "$(($(nproc)+1))" --log-format bar-with-logs --out-link "${SBUILD_TMPDIR}/nixbuild"
     find -L "$(find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' | head -n 1)" | sort | awk -F/ '{indent=""; for (i=2; i<NF; i++) indent=indent " "; print (NF>1 ? indent "--> " $NF : $NF)}'
    #Fix Perms
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' |\
     xargs -I{} find -L "{}" -type d -iregex ".*\(bin\|exec\).*" | \
     xargs -I{} sudo rsync -achLv --no-relative "{}/." "${SBUILD_TMPDIR}/."
     sudo chown -Rv "$(whoami):$(whoami)" "${SBUILD_TMPDIR}" && chmod -Rv 755 "${SBUILD_TMPDIR}"
    #Fix Shell Scripts
     find "${SBUILD_TMPDIR}" -type f -iregex '.*\.\(bin\|pl\)$' -exec bash -c 'mv -fv "$1" "${1%.*}"' _ "{}" \;
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type f \( -name "*.sh" -o -exec sh -c 'file -i "$1" | grep -qiv "application/.*executable"' sh {} \; \) -print0 | xargs -0 -I {} sh -c '
           sed "s|^#!/nix/store/.*/bin/sh|#!/bin/sh|" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ ]*/bin/\([^ ]*\)|/usr/local/bin/\1|g" -i "{}" 2>/dev/null
           sed "s|/nix/store/[^/]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^/ ]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ \"'\'']*|/|g" -i "{}" 2>/dev/null
       '
    #Copy
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type f -exec file -i "{}" \; | grep -Ei 'application/.*executable|text/x-perl|text/x-shellscript' | cut -d":" -f1 | xargs realpath | sort -u | xargs -I "{}" rsync -achvL "{}" "${SBUILD_OUTDIR}"
     ( askalono --format "json" crawl --follow "${SBUILD_TMPDIR}" | jq -r ".. | objects | .path? // empty" | head -n 1 | xargs -I "{}" cp -fv "{}" "${SBUILD_OUTDIR}/LICENSE" ) 2>/dev/null 