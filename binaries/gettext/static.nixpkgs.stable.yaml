#!/SBUILD ver @v1.0.0
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/binaries/gettext/static.nixpkgs.stable.yaml
_disabled: false

pkg: "gettext"
pkg_id: "nixpkgs.gettext"
pkg_type: "static"
category:
  - "ConsoleOnly"
  - "Utility"
description: 
  _default: "Utilities for the GNU Translation Project"
  autopoint: "Copies standard gettext infrastructure files into a source package [gettext]"
  envsubst: "Substitutes Environment variables in shell format strings [gettext]"
  gettext: "Retrieve text string from message database [gettext]"
  gettextize: "Prepares a source package to use gettext [gettext]"
  gettext.sh: "Gettext as a shell function library [gettext]"
  msgattrib: "Filter messages of a translation catalog according to their attributes & manipulate them [gettext]"
  msgcat: "Concatenate and merge the specified PO files [gettext]"
  msgcmp: "Compare message catalog and template [gettext]"
  msgcomm: "Find messages which are common to two or more of the specified PO files [gettext]"
  msgconv: "Convert a translation catalog to a different character encoding [gettext]"
  msgen: "Create an English translation catalog [gettext]"
  msgexec: "Apply a command to all translations of a translation catalog [gettext]"
  msgfilter: "Apply a filter to all translations of a translation catalog [gettext]"
  msgfmt: "Generate binary message catalog from textual translation description [gettext]"
  msggrep: "Extracts all messages of a translation catalog based on a pattern or belonging to some source files [gettext]"
  msginit: "Initialize a message catalog [gettext]"
  msgmerge: "Merge message catalog and template [gettext]"
  msgunfmt: "Convert binary message catalog to Uniforum style .po file [gettext]"
  msguniq: "Unify duplicate translations in message catalog [gettext]"
  ngettext: "Translate message and choose plural form [gettext]"
  recode-sr-latin: "Convert Serbian text from Cyrillic to Latin script [gettext]"
  xgettext: "Extract gettext strings from source [gettext]"
distro_pkg:
  alpine:
    - "gettext"
  archlinux:
    aur:
      - "gettext-git"
  debian:
    - "gettext"
  nixpkgs:
    - "gettext"
homepage:
  - "https://www.gnu.org/software/gettext"
  - "https://savannah.gnu.org/projects/gettext"
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "Built Using Nix. Check/Report @ https://github.com/NixOS/nixpkgs"
provides:
  - "autopoint"
  - "envsubst"
  - "gettext"
  - "gettextize"
  - "gettext.sh"
  - "msgattrib"
  - "msgcat"
  - "msgcmp"
  - "msgcomm"
  - "msgconv"
  - "msgen"
  - "msgexec"
  - "msgfilter"
  - "msgfmt"
  - "msggrep"
  - "msginit"
  - "msgmerge"
  - "msgunfmt"
  - "msguniq"
  - "ngettext"
  - "recode-sr-latin"
  - "xgettext" 
repology:
  - "gettext"
src_url:
  - "https://git.savannah.gnu.org/gitweb/?p=gettext.git"
tag:
  - "text"
  - "translation"
x_exec:
  host:
    - "aarch64-Linux"
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    nix derivation show "nixpkgs#gettext" --impure --refresh --quiet 1>&1 2>/dev/null | sed -n '/^[[:space:]]*{/,$p' | jq -r '.. | objects | (select(has("version")).version, (select(has("env")) | select(.env.__json != null) | .env.__json | fromjson | select(has("version")).version) | select(.))' | tr -d '[:space:]'
  run: |
    #Build
     echo -e "\n" ; nix-instantiate --eval --expr "builtins.toJSON (with import <nixpkgs> {}; ${PKG}.meta)" --quiet 2>/dev/null | jq -r fromjson 2>/dev/null ; echo -e "\n"
     nix-build '<nixpkgs>' --impure --attr "pkgsStatic.gettext" --cores "$(($(nproc)+1))" --max-jobs "$(($(nproc)+1))" --log-format bar-with-logs --out-link "${SBUILD_TMPDIR}/nixbuild"
     find -L "$(find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' | head -n 1)" | sort | awk -F/ '{indent=""; for (i=2; i<NF; i++) indent=indent " "; print (NF>1 ? indent "--> " $NF : $NF)}'
    #Fix Perms
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' |\
     xargs -I{} find -L "{}" -type d -iregex ".*\(bin\|exec\).*" | \
     xargs -I{} sudo rsync -achLv --no-relative "{}/." "${SBUILD_TMPDIR}/."
     sudo chown -Rv "$(whoami):$(whoami)" "${SBUILD_TMPDIR}" && chmod -Rv 755 "${SBUILD_TMPDIR}"
    #Fix Shell Scripts
     find "${SBUILD_TMPDIR}" -type f -iregex '.*\.\(bin\|pl\)$' -exec bash -c 'mv -fv "$1" "${1%.*}"' _ "{}" \;
     find "${SBUILD_TMPDIR}" -type f \( -name "*.sh" -o -exec sh -c 'file -i "$1" | grep -qiv "application/.*executable"' sh {} \; \) -print0 | xargs -0 -I {} sh -c '
           sed "s|^#!/nix/store/.*/bin/sh|#!/bin/sh|" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ ]*/bin/\([^ ]*\)|/usr/local/bin/\1|g" -i "{}" 2>/dev/null
           sed "s|/nix/store/[^/]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^/ ]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ \"'\'']*|/|g" -i "{}" 2>/dev/null
       '
    #Copy
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type f -exec file -i "{}" \; | grep -Ei 'application/.*executable|text/x-perl|text/x-shellscript' | cut -d":" -f1 | xargs realpath | sort -u | xargs -I "{}" rsync -achvL "{}" "${SBUILD_OUTDIR}"
     ( askalono --format "json" crawl --follow "${SBUILD_TMPDIR}" | jq -r ".. | objects | .path? // empty" | head -n 1 | xargs -I "{}" cp -fv "{}" "${SBUILD_OUTDIR}/LICENSE" ) 2>/dev/null 