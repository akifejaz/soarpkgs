#!/SBUILD ver @v1.0.0
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/binaries/sudo-rs.yaml
_disabled: false

pkg: "sudo-rs"
pkg_id: "github.com.memorysafety.sudo-rs"
pkg_type: "static"
category:
  - "ConsoleOnly"
  - "Utility"
description: "A memory safe implementation of sudo and su."
homepage:
  - "https://github.com/memorysafety/sudo-rs"
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "sudo must be owned by uid 0 and have the setuid bit set (RUN: sudo chown 'root:root' sudo ; sudo chmod 'a=rx,u+ws' sudo)"
repology:
  - "sudo-rs"
src_url:
  - "https://github.com/memorysafety/sudo-rs"
tag:
  - "Utility"
x_exec:
  host:
    - "aarch64-Linux"
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    {EMPTY}
  run: |
    #!/usr/bin/env bash

#-------------------------------------------------------#
#Sanity Checks
if [ "${BUILD}" != "YES" ] || \
   [ -z "${BINDIR}" ] || \
   [ -z "${EGET_EXCLUDE}" ] || \
   [ -z "${EGET_TIMEOUT}" ] || \
   [ -z "${GIT_TERMINAL_PROMPT}" ] || \
   [ -z "${GIT_ASKPASS}" ] || \
   [ -z "${GITHUB_TOKEN}" ] || \
   [ -z "${SYSTMP}" ] || \
   [ -z "${TMPDIRS}" ]; then
 #exit
  echo -e "\n[+]Skipping Builds...\n"
  exit 1
fi
#-------------------------------------------------------#

#-------------------------------------------------------#
##Main
export SKIP_BUILD="NO" #YES, in case of deleted repos, broken builds etc
if [ "${SKIP_BUILD}" == "NO" ]; then
  #sudo-rs: A memory safe implementation of sudo and su. 
     export BIN="sudo-rs" #Name of final binary/pkg/cli, sometimes differs from $REPO
     export SOURCE_URL="https://github.com/memorysafety/sudo-rs" #github/gitlab/homepage/etc for $BIN
     echo -e "\n\n [+] (Building | Fetching) ${BIN} :: ${SOURCE_URL} [$(TZ='UTC' date +'%A, %Y-%m-%d (%I:%M:%S %p)') UTC]\n"
      #Build 
       pushd "$($TMPDIRS)" &>/dev/null && git clone --quiet --filter "blob:none" "https://github.com/memorysafety/sudo-rs" && cd "./sudo-rs"
       sudo apt install libpam0g-dev -y
       export RUST_TARGET="x86_64-unknown-linux-gnu" && rustup target add "$RUST_TARGET"
       export RUSTFLAGS="-C default-linker-libraries=yes -C prefer-dynamic=no -C embed-bitcode=yes -C lto=yes -C opt-level=3 -C debuginfo=none -C strip=symbols -C link-arg=-Wl,-S -C link-arg=-Wl,--build-id=none"
       sed '/^\[profile\.release\]/,/^$/d' -i "./Cargo.toml" ; echo -e '\n[profile.release]\nstrip = true\nopt-level = 3\nlto = true' >> "./Cargo.toml"
       cargo build --target "$RUST_TARGET" --release --jobs="$(($(nproc)+1))" --keep-going
       staticx --loglevel DEBUG "./target/$RUST_TARGET/release/su" --strip "$BINDIR/su-rs"
       staticx --loglevel DEBUG "./target/$RUST_TARGET/release/sudo" --strip "$BINDIR/sudo-rs"
       staticx --loglevel DEBUG "./target/$RUST_TARGET/release/visudo" --strip "$BINDIR/visudo-rs" ; popd &>/dev/null
       #sudo must be owned by uid 0 and have the setuid bit set
       # sudo chown "root:root" sudo-rs
       # sudo chmod "a=rx,u+ws" sudo-rs
fi
#-------------------------------------------------------#

#-------------------------------------------------------#
##Cleanup
unset SKIP_BUILD ; export BUILT="YES"
#In case of zig polluted env
unset AR CC CFLAGS CXX CPPFLAGS CXXFLAGS DLLTOOL HOST_CC HOST_CXX LDFLAGS LIBS OBJCOPY RANLIB
#In case of go polluted env
unset GOARCH GOOS CGO_ENABLED CGO_CFLAGS
#PKG Config
unset PKG_CONFIG_PATH PKG_CONFIG_LIBDIR PKG_CONFIG_SYSROOT_DIR PKG_CONFIG_SYSTEM_INCLUDE_PATH PKG_CONFIG_SYSTEM_LIBRARY_PATH
#-------------------------------------------------------#
