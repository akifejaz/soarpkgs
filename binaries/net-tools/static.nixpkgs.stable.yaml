#!/SBUILD ver @v1.0.0
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/binaries/net-tools/static.nixpkgs.stable.yaml
_disabled: false

pkg: "net-tools"
pkg_id: "nixpkgs.net-tools"
pkg_type: "static"
category:
  - "ConsoleOnly"
  - "Utility"
description: 
  _default: "A set of tools for controlling the network subsystem in Linux"
  arp: "Manipulate the system ARP cache"
  dnsdomainname: "Show/Set the system's DNS domain name"
  domainname: "Show/Set the system's NIS/YP domain name"
  hostname: "Show/Set the system's host name"
  ifconfig: "Configure a network interface"
  mii-tool: "View/Manipulate media-independent interface status"
  nameif: "Name network interfaces based on MAC addresses"
  netstat: "Print network connections, routing tables, interface statistics, masquerade connections, and multicast memberships"
  nisdomainname: "Show/Set the system's NIS domain name"
  plipconfig: "Fine tune PLIP device parameters"
  rarp: "Manipulate the system RARP table"
  route: "Show/Manipulate the IP routing table"
  slattach: "Attach a network interface to a serial line"
  ypdomainname: "Show/Set the system's YP domain name"  
distro_pkg:
  alpine:
    - "net-tools"
  archlinux:
    aur:
      - "net-tools-git"
  debian:
    - "net-tools"
  homebrew:
    - "net-tools"
  nixpkgs:
    - "nettools"
homepage:
  - "https://net-tools.sourceforge.io/"
  - "https://git.code.sf.net/p/net-tools/code"
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "Built Using Nix. Check/Report @ https://github.com/NixOS/nixpkgs"  
provides:
  - "arp"
  - "dnsdomainname"
  - "domainname"
  - "hostname"
  - "ifconfig"
  - "mii-tool"
  - "nameif"
  - "netstat"
  - "nisdomainname"
  - "plipconfig"
  - "rarp"
  - "route"
  - "slattach"
  - "ypdomainname"  
repology:
  - "nettools"
  - "net-tools"
src_url:
  - "https://git.code.sf.net/p/net-tools/code"
tag:
  - "networking"
x_exec:
  host:
    - "aarch64-Linux"
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    nix derivation show "nixpkgs#nettools" --impure --refresh --quiet 1>&1 2>/dev/null | sed -n '/^[[:space:]]*{/,$p' | jq -r '.. | objects | (select(has("version")).version, (select(has("env")) | select(.env.__json != null) | .env.__json | fromjson | select(has("version")).version) | select(.))' | tr -d '[:space:]'
  run: |
    #Build
     echo -e "\n" ; nix-instantiate --eval --expr "builtins.toJSON (with import <nixpkgs> {}; ${PKG}.meta)" --quiet 2>/dev/null | jq -r fromjson 2>/dev/null ; echo -e "\n"
     nix-build '<nixpkgs>' --impure --attr "pkgsStatic.nettools" --cores "$(($(nproc)+1))" --max-jobs "$(($(nproc)+1))" --log-format bar-with-logs --out-link "${SBUILD_TMPDIR}/nixbuild"
     find -L "$(find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' | head -n 1)" | sort | awk -F/ '{indent=""; for (i=2; i<NF; i++) indent=indent " "; print (NF>1 ? indent "--> " $NF : $NF)}'
    #Fix Perms
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' |\
     xargs -I{} find -L "{}" -type d -iregex ".*\(bin\|exec\).*" | \
     xargs -I{} sudo rsync -achLv --no-relative "{}/." "${SBUILD_TMPDIR}/."
     sudo chown -Rv "$(whoami):$(whoami)" "${SBUILD_TMPDIR}" && chmod -Rv 755 "${SBUILD_TMPDIR}"
    #Fix Shell Scripts
     find "${SBUILD_TMPDIR}" -type f -iregex '.*\.\(bin\|pl\)$' -exec bash -c 'mv -fv "$1" "${1%.*}"' _ "{}" \;
     find "${SBUILD_TMPDIR}" -type f \( -name "*.sh" -o -exec sh -c 'file -i "$1" | grep -qiv "application/.*executable"' sh {} \; \) -print0 | xargs -0 -I {} sh -c '
           sed "s|^#!/nix/store/.*/bin/sh|#!/bin/sh|" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ ]*/bin/\([^ ]*\)|/usr/local/bin/\1|g" -i "{}" 2>/dev/null
           sed "s|/nix/store/[^/]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^/ ]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ \"'\'']*|/|g" -i "{}" 2>/dev/null
       '
    #Copy
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type f -exec file -i "{}" \; | grep -Ei 'application/.*executable|text/x-perl|text/x-shellscript' | cut -d":" -f1 | xargs realpath | sort -u | xargs -I "{}" rsync -achvL "{}" "${SBUILD_OUTDIR}"
     ( askalono --format "json" crawl --follow "${SBUILD_TMPDIR}" | jq -r ".. | objects | .path? // empty" | head -n 1 | xargs -I "{}" cp -fv "{}" "${SBUILD_OUTDIR}/LICENSE" ) 2>/dev/null 