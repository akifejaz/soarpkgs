#!/SBUILD ver @v1.0.0
#SELF: https://raw.githubusercontent.com/pkgforge/soarpkgs/refs/heads/main/binaries/hashcat-utils/static.nixpkgs.stable.yaml
_disabled: false

pkg: "hashcat-utils"
pkg_id: "nixpkgs.hashcat-utils"
pkg_type: "static"
category:
  - "ConsoleOnly"
  - "Utility"
description: 
  _default: "Utilities that are useful in advanced password cracking (HashCat)"
  cap2hccapx: "Generate .hccapx files from .cap/.pcap to crack WPA/WPA2 Authentications [hashcat-utils]"
  cleanup-rules: "Strips rules from STDIN that are not compatible with a specified platform [hashcat-utils]"
  combinator: "A stand-alone implementation of the Combinator Attack [hashcat-utils]"
  combinator3: "Combinator that accepts three input files & produces three combined  lists [hashcat-utils]"
  combipow: "Produce all unique combinations from a short list of inputs [hashcat-utils]"
  ct3_to_ntlm: "Convert ct3 to NTLM [hashcat-utils]"
  cutb: "Cut specific prefixes or suffixes from wordlist entries for use in Combinator attacks [hashcat-utils]"
  deskey_to_ntlm: "Convert deskto to NTLM [hashcat-utils]"
  expander: "Generate all patterns of a word by splitting, mutating, and reconstructing it with various lengths, offsets, and shifts [hashcat-utils]"
  gate: "Split Wordlists into equal sections for workload distribution [hashcat-utils]"
  generate-rules: "Stand-alone utility to generate random rules [hashcat-utils]"
  hcstat2gen: "Generate custom Markov statistics, for use with hashcat's --markov-hcstat2 parameter [hashcat-utils]"
  hcstatgen: "Generate .hcstat files for use with older hashcat's markov-hcstat parameter/statsprocessor [hashcat-utils]"
  keyspace: "Calculate keyspace in a hashcat-aware manner [hashcat-utils]"
  len: "Filter words by length, outputting only those within a specified range [hashcat-utils]"
  mli2: "Merge two lists [hashcat-utils]"
  morph: "Generate insertion rules for frequent character chains by position from a provided dictionary [hashcat-utils]"
  permute: "A stand-alone implementation of the Permutation Attack [hashcat-utils]"
  permute_exist: "Check if a permute Exists [hashcat-utils]"
  prepare: "Dictionary optimizer for the Permutation Attack [hashcat-utils]"
  remaining: "Subtract words from a search wordlist using a base wordlist, ideal for combinator attacks [hashcat-utils]"
  req-exclude: "Excludes passwords that match specific policy criteria [hashcat-utils]"
  req-include: "Filter passwords based on specified policy criteria, including lowercase, uppercase, and digit requirements [hashcat-utils]"
  rli: "Compares a single file against another file(s) and removes all duplicates [hashcat-utils]"
  rli2: "Compares a single file against another file(s) and removes all duplicates, Enhanced version [hashcat-utils]"
  rules_optimize: "Optimize Hashcat Rules [hashcat-utils]"
  seprule: "Generate unique combinations of characters with a rule and separator [hashcat-utils]"
  splitlen: "A dictionary optimizer for the now-deprecated oclHashcat [hashcat-utils]"
  strip-bsn: "Strip all \\0 bytes from stdin [hashcat-utils]"
  strip-bsr: "Strips all \\r bytes from stdin [hashcat-utils]"
  tmesis-dynamic: "Replace a substring in words from one list with words from another list [hashcat-utils]"
  tmesis: "Generate insertion rules to insert a word from a wordlist at various positions within another string [hashcat-utils]"
  topmorph: "Generate mutation rules by extracting frequent substrings from a dictionary within a specified range and width [hashcat-utils]"
distro_pkg:
  archlinux:
    aur:
      - "hashcat-utils-git"
    extra:
      - "hashcat-utils"
  nixpkgs:
    - "hashcat-utils"
homepage:
  - "https://hashcat.net/wiki/doku.php?id=hashcat_utils"
  - "https://github.com/hashcat/hashcat-utils"
  - "https://hashcat.net"
license:
  - "MIT"  
maintainer:
  - "Azathothas (https://github.com/Azathothas)"
note:
  - "[DO NOT RUN] (Meant for pkgforge CI Only)"
  - "Built Using Nix. Check/Report @ https://github.com/NixOS/nixpkgs"
  - "Manpage: https://hashcat.net/wiki/doku.php?id=hashcat_utils"
provides:
  - "cap2hccapx"
  - "cleanup-rules"
  - "combinator"
  - "combinator3"
  - "combipow"
  - "ct3_to_ntlm"
  - "cutb"
  - "deskey_to_ntlm"
  - "expander"
  - "gate"
  - "generate-rules"
  - "hcstat2gen"
  - "hcstatgen"
  - "keyspace"
  - "len"
  - "mli2"
  - "morph"
  - "permute"
  - "permute_exist"
  - "prepare"
  - "remaining"
  - "req-exclude"
  - "req-include"
  - "rli"
  - "rli2"
  - "rules_optimize"
  - "seprule"
  - "splitlen"
  - "strip-bsn"
  - "strip-bsr"
  - "tmesis-dynamic"
  - "tmesis"
  - "topmorph"  
repology:
  - "hashcat-utils"
src_url:
  - "https://github.com/hashcat/hashcat-utils"
tag:
  - "encryption"
  - "decryption"
x_exec:
  host:
    - "aarch64-Linux"
    - "x86_64-Linux"
  shell: "bash"
  pkgver: |
    nix derivation show "nixpkgs#hashcat-utils" --impure --refresh --quiet 1>&1 2>/dev/null | sed -n '/^[[:space:]]*{/,$p' | jq -r '.. | objects | (select(has("version")).version, (select(has("env")) | select(.env.__json != null) | .env.__json | fromjson | select(has("version")).version) | select(.))' | tr -d '[:space:]'
  run: |
    #Build
     echo -e "\n" ; nix-instantiate --eval --expr "builtins.toJSON (with import <nixpkgs> {}; ${PKG}.meta)" --quiet 2>/dev/null | jq -r fromjson 2>/dev/null ; echo -e "\n"
     nix-build '<nixpkgs>' --impure --attr "pkgsStatic.hashcat-utils" --cores "$(($(nproc)+1))" --max-jobs "$(($(nproc)+1))" --log-format bar-with-logs --out-link "${SBUILD_TMPDIR}/nixbuild"
     find -L "$(find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' | head -n 1)" | sort | awk -F/ '{indent=""; for (i=2; i<NF; i++) indent=indent " "; print (NF>1 ? indent "--> " $NF : $NF)}'
    #Fix Perms
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type d -o -type l -exec realpath "{}" \; | grep -Ev '^\.$' |\
     xargs -I{} find -L "{}" -type d -iregex ".*\(bin\|exec\).*" | \
     xargs -I{} sudo rsync -achLv --no-relative "{}/." "${SBUILD_TMPDIR}/."
     sudo chown -Rv "$(whoami):$(whoami)" "${SBUILD_TMPDIR}" && chmod -Rv 755 "${SBUILD_TMPDIR}"
    #Fix Shell Scripts
     find "${SBUILD_TMPDIR}" -type f -iregex '.*\.\(bin\|pl\)$' -exec bash -c 'mv -fv "$1" "${1%.*}"' _ "{}" \;
     find "${SBUILD_TMPDIR}" -type f \( -name "*.sh" -o -exec sh -c 'file -i "$1" | grep -qiv "application/.*executable"' sh {} \; \) -print0 | xargs -0 -I {} sh -c '
           sed "s|^#!/nix/store/.*/bin/sh|#!/bin/sh|" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ ]*/bin/\([^ ]*\)|/usr/local/bin/\1|g" -i "{}" 2>/dev/null
           sed "s|/nix/store/[^/]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^/ ]*/bin|/usr/local/bin|g" -i "{}" 2>/dev/null
           sed "s|/nix/store[^ \"'\'']*|/|g" -i "{}" 2>/dev/null
       '
    #Copy
     find "${SBUILD_TMPDIR}" -maxdepth 1 -type f -exec file -i "{}" \; | grep -Ei 'application/.*executable|text/x-perl|text/x-shellscript' | cut -d":" -f1 | xargs realpath | sort -u | xargs -I "{}" rsync -achvL "{}" "${SBUILD_OUTDIR}"
     ( askalono --format "json" crawl --follow "${SBUILD_TMPDIR}" | jq -r ".. | objects | .path? // empty" | head -n 1 | xargs -I "{}" cp -fv "{}" "${SBUILD_OUTDIR}/LICENSE" ) 2>/dev/null 